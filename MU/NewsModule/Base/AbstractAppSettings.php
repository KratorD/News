<?php
/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\NewsModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\GroupsModule\Constant as GroupsConstant;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;
use MU\NewsModule\Validator\Constraints as NewsAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @var GroupRepositoryInterface
     */
    protected $groupRepository;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableAttribution
     */
    protected $enableAttribution = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableMultiLanguage
     */
    protected $enableMultiLanguage = false;
    
    /**
     * This setting allows to enable the display of author informations within an article.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showAuthor
     */
    protected $showAuthor = false;
    
    /**
     * This setting allows to enable the display of date informations within an article.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showDate
     */
    protected $showDate = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableCategorization
     */
    protected $enableCategorization = false;
    
    /**
     * You can customise several display-oriented aspects of the articles.
     *
     * @Assert\NotBlank()
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="defaultMessageSorting", multiple=false)
     * @var string $defaultMessageSorting
     */
    protected $defaultMessageSorting = 'articledatetime';
    
    /**
     * @Assert\NotBlank()
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="defaultMessageSortingBackend", multiple=false)
     * @var string $defaultMessageSortingBackend
     */
    protected $defaultMessageSortingBackend = 'articledatetime';
    
    /**
     * @Assert\NotBlank()
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="sortingDirection", multiple=false)
     * @var string $sortingDirection
     */
    protected $sortingDirection = 'descending';
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableMoreMessagesInCategory
     */
    protected $enableMoreMessagesInCategory = false;
    
    /**
     * When displaying an article, a number of additional article titles in the same category can be shown. To show the additional article titles for every article set the value above to a number larger than 0. When the value is set to 0, the number of additional article titles can be set per article by means of the article attribute \'morearticlesincat\'. You need to enable \'article attributes\' yourself. When the setting above or the article attribute is set to 0, no titles will be extracted from the database.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $amountOfMoreArticlesInCategory
     */
    protected $amountOfMoreArticlesInCategory = 0;
    
    /**
     * Display a PDF link for the articles in the index page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $displayPdfLink
     */
    protected $displayPdfLink = false;
    
    /**
     * Allow uploading article pictures
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enablePictureUpload
     */
    protected $enablePictureUpload = false;
    
    /**
     * Image float on the view page
     *
     * @Assert\NotBlank()
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="imageFloatOnViewPage", multiple=false)
     * @var string $imageFloatOnViewPage
     */
    protected $imageFloatOnViewPage = 'left';
    
    /**
     * Image float on the article display page
     *
     * @Assert\NotBlank()
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="imageFloatOnDisplayPage", multiple=false)
     * @var string $imageFloatOnDisplayPage
     */
    protected $imageFloatOnDisplayPage = 'left';
    
    /**
     * For example: 4000 (byte), 100k (kilobyte) and 1M (megabyte).
     *
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $maxSize
     */
    protected $maxSize = '200k';
    
    /**
     * The amount of messages shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $messageEntriesPerPage
     */
    protected $messageEntriesPerPage = 10;
    
    /**
     * Whether to add a link to messages of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnMessagesOnAccountPage
     */
    protected $linkOwnMessagesOnAccountPage = true;
    
    /**
     * Whether only own entries should be shown on view pages by default or not
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showOnlyOwnEntries
     */
    protected $showOnlyOwnEntries = false;
    
    /**
     * Whether automatically filter data in the frontend based on the current locale or not
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $filterDataByLocale
     */
    protected $filterDataByLocale = false;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForMessageImageUpload1
     */
    protected $enableShrinkingForMessageImageUpload1 = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthMessageImageUpload1
     */
    protected $shrinkWidthMessageImageUpload1 = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightMessageImageUpload1
     */
    protected $shrinkHeightMessageImageUpload1 = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeMessageImageUpload1", multiple=false)
     * @var string $thumbnailModeMessageImageUpload1
     */
    protected $thumbnailModeMessageImageUpload1 = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMessageImageUpload1View
     */
    protected $thumbnailWidthMessageImageUpload1View = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMessageImageUpload1View
     */
    protected $thumbnailHeightMessageImageUpload1View = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMessageImageUpload1Display
     */
    protected $thumbnailWidthMessageImageUpload1Display = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMessageImageUpload1Display
     */
    protected $thumbnailHeightMessageImageUpload1Display = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMessageImageUpload1Edit
     */
    protected $thumbnailWidthMessageImageUpload1Edit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMessageImageUpload1Edit
     */
    protected $thumbnailHeightMessageImageUpload1Edit = 180;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForMessageImageUpload2
     */
    protected $enableShrinkingForMessageImageUpload2 = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthMessageImageUpload2
     */
    protected $shrinkWidthMessageImageUpload2 = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightMessageImageUpload2
     */
    protected $shrinkHeightMessageImageUpload2 = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeMessageImageUpload2", multiple=false)
     * @var string $thumbnailModeMessageImageUpload2
     */
    protected $thumbnailModeMessageImageUpload2 = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMessageImageUpload2View
     */
    protected $thumbnailWidthMessageImageUpload2View = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMessageImageUpload2View
     */
    protected $thumbnailHeightMessageImageUpload2View = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMessageImageUpload2Display
     */
    protected $thumbnailWidthMessageImageUpload2Display = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMessageImageUpload2Display
     */
    protected $thumbnailHeightMessageImageUpload2Display = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMessageImageUpload2Edit
     */
    protected $thumbnailWidthMessageImageUpload2Edit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMessageImageUpload2Edit
     */
    protected $thumbnailHeightMessageImageUpload2Edit = 180;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForMessageImageUpload3
     */
    protected $enableShrinkingForMessageImageUpload3 = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthMessageImageUpload3
     */
    protected $shrinkWidthMessageImageUpload3 = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightMessageImageUpload3
     */
    protected $shrinkHeightMessageImageUpload3 = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeMessageImageUpload3", multiple=false)
     * @var string $thumbnailModeMessageImageUpload3
     */
    protected $thumbnailModeMessageImageUpload3 = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMessageImageUpload3View
     */
    protected $thumbnailWidthMessageImageUpload3View = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMessageImageUpload3View
     */
    protected $thumbnailHeightMessageImageUpload3View = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMessageImageUpload3Display
     */
    protected $thumbnailWidthMessageImageUpload3Display = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMessageImageUpload3Display
     */
    protected $thumbnailHeightMessageImageUpload3Display = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMessageImageUpload3Edit
     */
    protected $thumbnailWidthMessageImageUpload3Edit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMessageImageUpload3Edit
     */
    protected $thumbnailHeightMessageImageUpload3Edit = 180;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForMessageImageUpload4
     */
    protected $enableShrinkingForMessageImageUpload4 = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthMessageImageUpload4
     */
    protected $shrinkWidthMessageImageUpload4 = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightMessageImageUpload4
     */
    protected $shrinkHeightMessageImageUpload4 = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeMessageImageUpload4", multiple=false)
     * @var string $thumbnailModeMessageImageUpload4
     */
    protected $thumbnailModeMessageImageUpload4 = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMessageImageUpload4View
     */
    protected $thumbnailWidthMessageImageUpload4View = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMessageImageUpload4View
     */
    protected $thumbnailHeightMessageImageUpload4View = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMessageImageUpload4Display
     */
    protected $thumbnailWidthMessageImageUpload4Display = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMessageImageUpload4Display
     */
    protected $thumbnailHeightMessageImageUpload4Display = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMessageImageUpload4Edit
     */
    protected $thumbnailWidthMessageImageUpload4Edit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMessageImageUpload4Edit
     */
    protected $thumbnailHeightMessageImageUpload4Edit = 180;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForImageTheFile
     */
    protected $enableShrinkingForImageTheFile = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthImageTheFile
     */
    protected $shrinkWidthImageTheFile = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightImageTheFile
     */
    protected $shrinkHeightImageTheFile = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeImageTheFile", multiple=false)
     * @var string $thumbnailModeImageTheFile
     */
    protected $thumbnailModeImageTheFile = 'inset';
    
    /**
     * Used to determine moderator user accounts for sending email notifications.
     *
     * @Assert\NotBlank()
     * @var integer $moderationGroupForMessages
     */
    protected $moderationGroupForMessages = 2;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreatorForMessage
     */
    protected $allowModerationSpecificCreatorForMessage = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreationDateForMessage
     */
    protected $allowModerationSpecificCreationDateForMessage = false;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull()
     * @NewsAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     * @var string $enabledFinderTypes
     */
    protected $enabledFinderTypes = 'message###image';
    
    
    /**
     * AppSettings constructor.
     *
     * @param VariableApiInterface $variableApi
     * @param GroupRepositoryInterface $groupRepository
     */
    public function __construct(
        VariableApiInterface $variableApi,
        GroupRepositoryInterface $groupRepository
    ) {
        $this->variableApi = $variableApi;
        $this->groupRepository = $groupRepository;
    
        $this->load();
    }
    
    /**
     * Returns the enable attribution.
     *
     * @return boolean
     */
    public function getEnableAttribution()
    {
        return $this->enableAttribution;
    }
    
    /**
     * Sets the enable attribution.
     *
     * @param boolean $enableAttribution
     *
     * @return void
     */
    public function setEnableAttribution($enableAttribution)
    {
        if (boolval($this->enableAttribution) !== boolval($enableAttribution)) {
            $this->enableAttribution = boolval($enableAttribution);
        }
    }
    
    /**
     * Returns the enable multi language.
     *
     * @return boolean
     */
    public function getEnableMultiLanguage()
    {
        return $this->enableMultiLanguage;
    }
    
    /**
     * Sets the enable multi language.
     *
     * @param boolean $enableMultiLanguage
     *
     * @return void
     */
    public function setEnableMultiLanguage($enableMultiLanguage)
    {
        if (boolval($this->enableMultiLanguage) !== boolval($enableMultiLanguage)) {
            $this->enableMultiLanguage = boolval($enableMultiLanguage);
        }
    }
    
    /**
     * Returns the show author.
     *
     * @return boolean
     */
    public function getShowAuthor()
    {
        return $this->showAuthor;
    }
    
    /**
     * Sets the show author.
     *
     * @param boolean $showAuthor
     *
     * @return void
     */
    public function setShowAuthor($showAuthor)
    {
        if (boolval($this->showAuthor) !== boolval($showAuthor)) {
            $this->showAuthor = boolval($showAuthor);
        }
    }
    
    /**
     * Returns the show date.
     *
     * @return boolean
     */
    public function getShowDate()
    {
        return $this->showDate;
    }
    
    /**
     * Sets the show date.
     *
     * @param boolean $showDate
     *
     * @return void
     */
    public function setShowDate($showDate)
    {
        if (boolval($this->showDate) !== boolval($showDate)) {
            $this->showDate = boolval($showDate);
        }
    }
    
    /**
     * Returns the enable categorization.
     *
     * @return boolean
     */
    public function getEnableCategorization()
    {
        return $this->enableCategorization;
    }
    
    /**
     * Sets the enable categorization.
     *
     * @param boolean $enableCategorization
     *
     * @return void
     */
    public function setEnableCategorization($enableCategorization)
    {
        if (boolval($this->enableCategorization) !== boolval($enableCategorization)) {
            $this->enableCategorization = boolval($enableCategorization);
        }
    }
    
    /**
     * Returns the default message sorting.
     *
     * @return string
     */
    public function getDefaultMessageSorting()
    {
        return $this->defaultMessageSorting;
    }
    
    /**
     * Sets the default message sorting.
     *
     * @param string $defaultMessageSorting
     *
     * @return void
     */
    public function setDefaultMessageSorting($defaultMessageSorting)
    {
        if ($this->defaultMessageSorting !== $defaultMessageSorting) {
            $this->defaultMessageSorting = isset($defaultMessageSorting) ? $defaultMessageSorting : '';
        }
    }
    
    /**
     * Returns the default message sorting backend.
     *
     * @return string
     */
    public function getDefaultMessageSortingBackend()
    {
        return $this->defaultMessageSortingBackend;
    }
    
    /**
     * Sets the default message sorting backend.
     *
     * @param string $defaultMessageSortingBackend
     *
     * @return void
     */
    public function setDefaultMessageSortingBackend($defaultMessageSortingBackend)
    {
        if ($this->defaultMessageSortingBackend !== $defaultMessageSortingBackend) {
            $this->defaultMessageSortingBackend = isset($defaultMessageSortingBackend) ? $defaultMessageSortingBackend : '';
        }
    }
    
    /**
     * Returns the sorting direction.
     *
     * @return string
     */
    public function getSortingDirection()
    {
        return $this->sortingDirection;
    }
    
    /**
     * Sets the sorting direction.
     *
     * @param string $sortingDirection
     *
     * @return void
     */
    public function setSortingDirection($sortingDirection)
    {
        if ($this->sortingDirection !== $sortingDirection) {
            $this->sortingDirection = isset($sortingDirection) ? $sortingDirection : '';
        }
    }
    
    /**
     * Returns the enable more messages in category.
     *
     * @return boolean
     */
    public function getEnableMoreMessagesInCategory()
    {
        return $this->enableMoreMessagesInCategory;
    }
    
    /**
     * Sets the enable more messages in category.
     *
     * @param boolean $enableMoreMessagesInCategory
     *
     * @return void
     */
    public function setEnableMoreMessagesInCategory($enableMoreMessagesInCategory)
    {
        if (boolval($this->enableMoreMessagesInCategory) !== boolval($enableMoreMessagesInCategory)) {
            $this->enableMoreMessagesInCategory = boolval($enableMoreMessagesInCategory);
        }
    }
    
    /**
     * Returns the amount of more articles in category.
     *
     * @return integer
     */
    public function getAmountOfMoreArticlesInCategory()
    {
        return $this->amountOfMoreArticlesInCategory;
    }
    
    /**
     * Sets the amount of more articles in category.
     *
     * @param integer $amountOfMoreArticlesInCategory
     *
     * @return void
     */
    public function setAmountOfMoreArticlesInCategory($amountOfMoreArticlesInCategory)
    {
        if (intval($this->amountOfMoreArticlesInCategory) !== intval($amountOfMoreArticlesInCategory)) {
            $this->amountOfMoreArticlesInCategory = intval($amountOfMoreArticlesInCategory);
        }
    }
    
    /**
     * Returns the display pdf link.
     *
     * @return boolean
     */
    public function getDisplayPdfLink()
    {
        return $this->displayPdfLink;
    }
    
    /**
     * Sets the display pdf link.
     *
     * @param boolean $displayPdfLink
     *
     * @return void
     */
    public function setDisplayPdfLink($displayPdfLink)
    {
        if (boolval($this->displayPdfLink) !== boolval($displayPdfLink)) {
            $this->displayPdfLink = boolval($displayPdfLink);
        }
    }
    
    /**
     * Returns the enable picture upload.
     *
     * @return boolean
     */
    public function getEnablePictureUpload()
    {
        return $this->enablePictureUpload;
    }
    
    /**
     * Sets the enable picture upload.
     *
     * @param boolean $enablePictureUpload
     *
     * @return void
     */
    public function setEnablePictureUpload($enablePictureUpload)
    {
        if (boolval($this->enablePictureUpload) !== boolval($enablePictureUpload)) {
            $this->enablePictureUpload = boolval($enablePictureUpload);
        }
    }
    
    /**
     * Returns the image float on view page.
     *
     * @return string
     */
    public function getImageFloatOnViewPage()
    {
        return $this->imageFloatOnViewPage;
    }
    
    /**
     * Sets the image float on view page.
     *
     * @param string $imageFloatOnViewPage
     *
     * @return void
     */
    public function setImageFloatOnViewPage($imageFloatOnViewPage)
    {
        if ($this->imageFloatOnViewPage !== $imageFloatOnViewPage) {
            $this->imageFloatOnViewPage = isset($imageFloatOnViewPage) ? $imageFloatOnViewPage : '';
        }
    }
    
    /**
     * Returns the image float on display page.
     *
     * @return string
     */
    public function getImageFloatOnDisplayPage()
    {
        return $this->imageFloatOnDisplayPage;
    }
    
    /**
     * Sets the image float on display page.
     *
     * @param string $imageFloatOnDisplayPage
     *
     * @return void
     */
    public function setImageFloatOnDisplayPage($imageFloatOnDisplayPage)
    {
        if ($this->imageFloatOnDisplayPage !== $imageFloatOnDisplayPage) {
            $this->imageFloatOnDisplayPage = isset($imageFloatOnDisplayPage) ? $imageFloatOnDisplayPage : '';
        }
    }
    
    /**
     * Returns the max size.
     *
     * @return string
     */
    public function getMaxSize()
    {
        return $this->maxSize;
    }
    
    /**
     * Sets the max size.
     *
     * @param string $maxSize
     *
     * @return void
     */
    public function setMaxSize($maxSize)
    {
        if ($this->maxSize !== $maxSize) {
            $this->maxSize = isset($maxSize) ? $maxSize : '';
        }
    }
    
    /**
     * Returns the message entries per page.
     *
     * @return integer
     */
    public function getMessageEntriesPerPage()
    {
        return $this->messageEntriesPerPage;
    }
    
    /**
     * Sets the message entries per page.
     *
     * @param integer $messageEntriesPerPage
     *
     * @return void
     */
    public function setMessageEntriesPerPage($messageEntriesPerPage)
    {
        if (intval($this->messageEntriesPerPage) !== intval($messageEntriesPerPage)) {
            $this->messageEntriesPerPage = intval($messageEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own messages on account page.
     *
     * @return boolean
     */
    public function getLinkOwnMessagesOnAccountPage()
    {
        return $this->linkOwnMessagesOnAccountPage;
    }
    
    /**
     * Sets the link own messages on account page.
     *
     * @param boolean $linkOwnMessagesOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnMessagesOnAccountPage($linkOwnMessagesOnAccountPage)
    {
        if (boolval($this->linkOwnMessagesOnAccountPage) !== boolval($linkOwnMessagesOnAccountPage)) {
            $this->linkOwnMessagesOnAccountPage = boolval($linkOwnMessagesOnAccountPage);
        }
    }
    
    /**
     * Returns the show only own entries.
     *
     * @return boolean
     */
    public function getShowOnlyOwnEntries()
    {
        return $this->showOnlyOwnEntries;
    }
    
    /**
     * Sets the show only own entries.
     *
     * @param boolean $showOnlyOwnEntries
     *
     * @return void
     */
    public function setShowOnlyOwnEntries($showOnlyOwnEntries)
    {
        if (boolval($this->showOnlyOwnEntries) !== boolval($showOnlyOwnEntries)) {
            $this->showOnlyOwnEntries = boolval($showOnlyOwnEntries);
        }
    }
    
    /**
     * Returns the filter data by locale.
     *
     * @return boolean
     */
    public function getFilterDataByLocale()
    {
        return $this->filterDataByLocale;
    }
    
    /**
     * Sets the filter data by locale.
     *
     * @param boolean $filterDataByLocale
     *
     * @return void
     */
    public function setFilterDataByLocale($filterDataByLocale)
    {
        if (boolval($this->filterDataByLocale) !== boolval($filterDataByLocale)) {
            $this->filterDataByLocale = boolval($filterDataByLocale);
        }
    }
    
    /**
     * Returns the enable shrinking for message image upload 1.
     *
     * @return boolean
     */
    public function getEnableShrinkingForMessageImageUpload1()
    {
        return $this->enableShrinkingForMessageImageUpload1;
    }
    
    /**
     * Sets the enable shrinking for message image upload 1.
     *
     * @param boolean $enableShrinkingForMessageImageUpload1
     *
     * @return void
     */
    public function setEnableShrinkingForMessageImageUpload1($enableShrinkingForMessageImageUpload1)
    {
        if (boolval($this->enableShrinkingForMessageImageUpload1) !== boolval($enableShrinkingForMessageImageUpload1)) {
            $this->enableShrinkingForMessageImageUpload1 = boolval($enableShrinkingForMessageImageUpload1);
        }
    }
    
    /**
     * Returns the shrink width message image upload 1.
     *
     * @return integer
     */
    public function getShrinkWidthMessageImageUpload1()
    {
        return $this->shrinkWidthMessageImageUpload1;
    }
    
    /**
     * Sets the shrink width message image upload 1.
     *
     * @param integer $shrinkWidthMessageImageUpload1
     *
     * @return void
     */
    public function setShrinkWidthMessageImageUpload1($shrinkWidthMessageImageUpload1)
    {
        if (intval($this->shrinkWidthMessageImageUpload1) !== intval($shrinkWidthMessageImageUpload1)) {
            $this->shrinkWidthMessageImageUpload1 = intval($shrinkWidthMessageImageUpload1);
        }
    }
    
    /**
     * Returns the shrink height message image upload 1.
     *
     * @return integer
     */
    public function getShrinkHeightMessageImageUpload1()
    {
        return $this->shrinkHeightMessageImageUpload1;
    }
    
    /**
     * Sets the shrink height message image upload 1.
     *
     * @param integer $shrinkHeightMessageImageUpload1
     *
     * @return void
     */
    public function setShrinkHeightMessageImageUpload1($shrinkHeightMessageImageUpload1)
    {
        if (intval($this->shrinkHeightMessageImageUpload1) !== intval($shrinkHeightMessageImageUpload1)) {
            $this->shrinkHeightMessageImageUpload1 = intval($shrinkHeightMessageImageUpload1);
        }
    }
    
    /**
     * Returns the thumbnail mode message image upload 1.
     *
     * @return string
     */
    public function getThumbnailModeMessageImageUpload1()
    {
        return $this->thumbnailModeMessageImageUpload1;
    }
    
    /**
     * Sets the thumbnail mode message image upload 1.
     *
     * @param string $thumbnailModeMessageImageUpload1
     *
     * @return void
     */
    public function setThumbnailModeMessageImageUpload1($thumbnailModeMessageImageUpload1)
    {
        if ($this->thumbnailModeMessageImageUpload1 !== $thumbnailModeMessageImageUpload1) {
            $this->thumbnailModeMessageImageUpload1 = isset($thumbnailModeMessageImageUpload1) ? $thumbnailModeMessageImageUpload1 : '';
        }
    }
    
    /**
     * Returns the thumbnail width message image upload 1 view.
     *
     * @return integer
     */
    public function getThumbnailWidthMessageImageUpload1View()
    {
        return $this->thumbnailWidthMessageImageUpload1View;
    }
    
    /**
     * Sets the thumbnail width message image upload 1 view.
     *
     * @param integer $thumbnailWidthMessageImageUpload1View
     *
     * @return void
     */
    public function setThumbnailWidthMessageImageUpload1View($thumbnailWidthMessageImageUpload1View)
    {
        if (intval($this->thumbnailWidthMessageImageUpload1View) !== intval($thumbnailWidthMessageImageUpload1View)) {
            $this->thumbnailWidthMessageImageUpload1View = intval($thumbnailWidthMessageImageUpload1View);
        }
    }
    
    /**
     * Returns the thumbnail height message image upload 1 view.
     *
     * @return integer
     */
    public function getThumbnailHeightMessageImageUpload1View()
    {
        return $this->thumbnailHeightMessageImageUpload1View;
    }
    
    /**
     * Sets the thumbnail height message image upload 1 view.
     *
     * @param integer $thumbnailHeightMessageImageUpload1View
     *
     * @return void
     */
    public function setThumbnailHeightMessageImageUpload1View($thumbnailHeightMessageImageUpload1View)
    {
        if (intval($this->thumbnailHeightMessageImageUpload1View) !== intval($thumbnailHeightMessageImageUpload1View)) {
            $this->thumbnailHeightMessageImageUpload1View = intval($thumbnailHeightMessageImageUpload1View);
        }
    }
    
    /**
     * Returns the thumbnail width message image upload 1 display.
     *
     * @return integer
     */
    public function getThumbnailWidthMessageImageUpload1Display()
    {
        return $this->thumbnailWidthMessageImageUpload1Display;
    }
    
    /**
     * Sets the thumbnail width message image upload 1 display.
     *
     * @param integer $thumbnailWidthMessageImageUpload1Display
     *
     * @return void
     */
    public function setThumbnailWidthMessageImageUpload1Display($thumbnailWidthMessageImageUpload1Display)
    {
        if (intval($this->thumbnailWidthMessageImageUpload1Display) !== intval($thumbnailWidthMessageImageUpload1Display)) {
            $this->thumbnailWidthMessageImageUpload1Display = intval($thumbnailWidthMessageImageUpload1Display);
        }
    }
    
    /**
     * Returns the thumbnail height message image upload 1 display.
     *
     * @return integer
     */
    public function getThumbnailHeightMessageImageUpload1Display()
    {
        return $this->thumbnailHeightMessageImageUpload1Display;
    }
    
    /**
     * Sets the thumbnail height message image upload 1 display.
     *
     * @param integer $thumbnailHeightMessageImageUpload1Display
     *
     * @return void
     */
    public function setThumbnailHeightMessageImageUpload1Display($thumbnailHeightMessageImageUpload1Display)
    {
        if (intval($this->thumbnailHeightMessageImageUpload1Display) !== intval($thumbnailHeightMessageImageUpload1Display)) {
            $this->thumbnailHeightMessageImageUpload1Display = intval($thumbnailHeightMessageImageUpload1Display);
        }
    }
    
    /**
     * Returns the thumbnail width message image upload 1 edit.
     *
     * @return integer
     */
    public function getThumbnailWidthMessageImageUpload1Edit()
    {
        return $this->thumbnailWidthMessageImageUpload1Edit;
    }
    
    /**
     * Sets the thumbnail width message image upload 1 edit.
     *
     * @param integer $thumbnailWidthMessageImageUpload1Edit
     *
     * @return void
     */
    public function setThumbnailWidthMessageImageUpload1Edit($thumbnailWidthMessageImageUpload1Edit)
    {
        if (intval($this->thumbnailWidthMessageImageUpload1Edit) !== intval($thumbnailWidthMessageImageUpload1Edit)) {
            $this->thumbnailWidthMessageImageUpload1Edit = intval($thumbnailWidthMessageImageUpload1Edit);
        }
    }
    
    /**
     * Returns the thumbnail height message image upload 1 edit.
     *
     * @return integer
     */
    public function getThumbnailHeightMessageImageUpload1Edit()
    {
        return $this->thumbnailHeightMessageImageUpload1Edit;
    }
    
    /**
     * Sets the thumbnail height message image upload 1 edit.
     *
     * @param integer $thumbnailHeightMessageImageUpload1Edit
     *
     * @return void
     */
    public function setThumbnailHeightMessageImageUpload1Edit($thumbnailHeightMessageImageUpload1Edit)
    {
        if (intval($this->thumbnailHeightMessageImageUpload1Edit) !== intval($thumbnailHeightMessageImageUpload1Edit)) {
            $this->thumbnailHeightMessageImageUpload1Edit = intval($thumbnailHeightMessageImageUpload1Edit);
        }
    }
    
    /**
     * Returns the enable shrinking for message image upload 2.
     *
     * @return boolean
     */
    public function getEnableShrinkingForMessageImageUpload2()
    {
        return $this->enableShrinkingForMessageImageUpload2;
    }
    
    /**
     * Sets the enable shrinking for message image upload 2.
     *
     * @param boolean $enableShrinkingForMessageImageUpload2
     *
     * @return void
     */
    public function setEnableShrinkingForMessageImageUpload2($enableShrinkingForMessageImageUpload2)
    {
        if (boolval($this->enableShrinkingForMessageImageUpload2) !== boolval($enableShrinkingForMessageImageUpload2)) {
            $this->enableShrinkingForMessageImageUpload2 = boolval($enableShrinkingForMessageImageUpload2);
        }
    }
    
    /**
     * Returns the shrink width message image upload 2.
     *
     * @return integer
     */
    public function getShrinkWidthMessageImageUpload2()
    {
        return $this->shrinkWidthMessageImageUpload2;
    }
    
    /**
     * Sets the shrink width message image upload 2.
     *
     * @param integer $shrinkWidthMessageImageUpload2
     *
     * @return void
     */
    public function setShrinkWidthMessageImageUpload2($shrinkWidthMessageImageUpload2)
    {
        if (intval($this->shrinkWidthMessageImageUpload2) !== intval($shrinkWidthMessageImageUpload2)) {
            $this->shrinkWidthMessageImageUpload2 = intval($shrinkWidthMessageImageUpload2);
        }
    }
    
    /**
     * Returns the shrink height message image upload 2.
     *
     * @return integer
     */
    public function getShrinkHeightMessageImageUpload2()
    {
        return $this->shrinkHeightMessageImageUpload2;
    }
    
    /**
     * Sets the shrink height message image upload 2.
     *
     * @param integer $shrinkHeightMessageImageUpload2
     *
     * @return void
     */
    public function setShrinkHeightMessageImageUpload2($shrinkHeightMessageImageUpload2)
    {
        if (intval($this->shrinkHeightMessageImageUpload2) !== intval($shrinkHeightMessageImageUpload2)) {
            $this->shrinkHeightMessageImageUpload2 = intval($shrinkHeightMessageImageUpload2);
        }
    }
    
    /**
     * Returns the thumbnail mode message image upload 2.
     *
     * @return string
     */
    public function getThumbnailModeMessageImageUpload2()
    {
        return $this->thumbnailModeMessageImageUpload2;
    }
    
    /**
     * Sets the thumbnail mode message image upload 2.
     *
     * @param string $thumbnailModeMessageImageUpload2
     *
     * @return void
     */
    public function setThumbnailModeMessageImageUpload2($thumbnailModeMessageImageUpload2)
    {
        if ($this->thumbnailModeMessageImageUpload2 !== $thumbnailModeMessageImageUpload2) {
            $this->thumbnailModeMessageImageUpload2 = isset($thumbnailModeMessageImageUpload2) ? $thumbnailModeMessageImageUpload2 : '';
        }
    }
    
    /**
     * Returns the thumbnail width message image upload 2 view.
     *
     * @return integer
     */
    public function getThumbnailWidthMessageImageUpload2View()
    {
        return $this->thumbnailWidthMessageImageUpload2View;
    }
    
    /**
     * Sets the thumbnail width message image upload 2 view.
     *
     * @param integer $thumbnailWidthMessageImageUpload2View
     *
     * @return void
     */
    public function setThumbnailWidthMessageImageUpload2View($thumbnailWidthMessageImageUpload2View)
    {
        if (intval($this->thumbnailWidthMessageImageUpload2View) !== intval($thumbnailWidthMessageImageUpload2View)) {
            $this->thumbnailWidthMessageImageUpload2View = intval($thumbnailWidthMessageImageUpload2View);
        }
    }
    
    /**
     * Returns the thumbnail height message image upload 2 view.
     *
     * @return integer
     */
    public function getThumbnailHeightMessageImageUpload2View()
    {
        return $this->thumbnailHeightMessageImageUpload2View;
    }
    
    /**
     * Sets the thumbnail height message image upload 2 view.
     *
     * @param integer $thumbnailHeightMessageImageUpload2View
     *
     * @return void
     */
    public function setThumbnailHeightMessageImageUpload2View($thumbnailHeightMessageImageUpload2View)
    {
        if (intval($this->thumbnailHeightMessageImageUpload2View) !== intval($thumbnailHeightMessageImageUpload2View)) {
            $this->thumbnailHeightMessageImageUpload2View = intval($thumbnailHeightMessageImageUpload2View);
        }
    }
    
    /**
     * Returns the thumbnail width message image upload 2 display.
     *
     * @return integer
     */
    public function getThumbnailWidthMessageImageUpload2Display()
    {
        return $this->thumbnailWidthMessageImageUpload2Display;
    }
    
    /**
     * Sets the thumbnail width message image upload 2 display.
     *
     * @param integer $thumbnailWidthMessageImageUpload2Display
     *
     * @return void
     */
    public function setThumbnailWidthMessageImageUpload2Display($thumbnailWidthMessageImageUpload2Display)
    {
        if (intval($this->thumbnailWidthMessageImageUpload2Display) !== intval($thumbnailWidthMessageImageUpload2Display)) {
            $this->thumbnailWidthMessageImageUpload2Display = intval($thumbnailWidthMessageImageUpload2Display);
        }
    }
    
    /**
     * Returns the thumbnail height message image upload 2 display.
     *
     * @return integer
     */
    public function getThumbnailHeightMessageImageUpload2Display()
    {
        return $this->thumbnailHeightMessageImageUpload2Display;
    }
    
    /**
     * Sets the thumbnail height message image upload 2 display.
     *
     * @param integer $thumbnailHeightMessageImageUpload2Display
     *
     * @return void
     */
    public function setThumbnailHeightMessageImageUpload2Display($thumbnailHeightMessageImageUpload2Display)
    {
        if (intval($this->thumbnailHeightMessageImageUpload2Display) !== intval($thumbnailHeightMessageImageUpload2Display)) {
            $this->thumbnailHeightMessageImageUpload2Display = intval($thumbnailHeightMessageImageUpload2Display);
        }
    }
    
    /**
     * Returns the thumbnail width message image upload 2 edit.
     *
     * @return integer
     */
    public function getThumbnailWidthMessageImageUpload2Edit()
    {
        return $this->thumbnailWidthMessageImageUpload2Edit;
    }
    
    /**
     * Sets the thumbnail width message image upload 2 edit.
     *
     * @param integer $thumbnailWidthMessageImageUpload2Edit
     *
     * @return void
     */
    public function setThumbnailWidthMessageImageUpload2Edit($thumbnailWidthMessageImageUpload2Edit)
    {
        if (intval($this->thumbnailWidthMessageImageUpload2Edit) !== intval($thumbnailWidthMessageImageUpload2Edit)) {
            $this->thumbnailWidthMessageImageUpload2Edit = intval($thumbnailWidthMessageImageUpload2Edit);
        }
    }
    
    /**
     * Returns the thumbnail height message image upload 2 edit.
     *
     * @return integer
     */
    public function getThumbnailHeightMessageImageUpload2Edit()
    {
        return $this->thumbnailHeightMessageImageUpload2Edit;
    }
    
    /**
     * Sets the thumbnail height message image upload 2 edit.
     *
     * @param integer $thumbnailHeightMessageImageUpload2Edit
     *
     * @return void
     */
    public function setThumbnailHeightMessageImageUpload2Edit($thumbnailHeightMessageImageUpload2Edit)
    {
        if (intval($this->thumbnailHeightMessageImageUpload2Edit) !== intval($thumbnailHeightMessageImageUpload2Edit)) {
            $this->thumbnailHeightMessageImageUpload2Edit = intval($thumbnailHeightMessageImageUpload2Edit);
        }
    }
    
    /**
     * Returns the enable shrinking for message image upload 3.
     *
     * @return boolean
     */
    public function getEnableShrinkingForMessageImageUpload3()
    {
        return $this->enableShrinkingForMessageImageUpload3;
    }
    
    /**
     * Sets the enable shrinking for message image upload 3.
     *
     * @param boolean $enableShrinkingForMessageImageUpload3
     *
     * @return void
     */
    public function setEnableShrinkingForMessageImageUpload3($enableShrinkingForMessageImageUpload3)
    {
        if (boolval($this->enableShrinkingForMessageImageUpload3) !== boolval($enableShrinkingForMessageImageUpload3)) {
            $this->enableShrinkingForMessageImageUpload3 = boolval($enableShrinkingForMessageImageUpload3);
        }
    }
    
    /**
     * Returns the shrink width message image upload 3.
     *
     * @return integer
     */
    public function getShrinkWidthMessageImageUpload3()
    {
        return $this->shrinkWidthMessageImageUpload3;
    }
    
    /**
     * Sets the shrink width message image upload 3.
     *
     * @param integer $shrinkWidthMessageImageUpload3
     *
     * @return void
     */
    public function setShrinkWidthMessageImageUpload3($shrinkWidthMessageImageUpload3)
    {
        if (intval($this->shrinkWidthMessageImageUpload3) !== intval($shrinkWidthMessageImageUpload3)) {
            $this->shrinkWidthMessageImageUpload3 = intval($shrinkWidthMessageImageUpload3);
        }
    }
    
    /**
     * Returns the shrink height message image upload 3.
     *
     * @return integer
     */
    public function getShrinkHeightMessageImageUpload3()
    {
        return $this->shrinkHeightMessageImageUpload3;
    }
    
    /**
     * Sets the shrink height message image upload 3.
     *
     * @param integer $shrinkHeightMessageImageUpload3
     *
     * @return void
     */
    public function setShrinkHeightMessageImageUpload3($shrinkHeightMessageImageUpload3)
    {
        if (intval($this->shrinkHeightMessageImageUpload3) !== intval($shrinkHeightMessageImageUpload3)) {
            $this->shrinkHeightMessageImageUpload3 = intval($shrinkHeightMessageImageUpload3);
        }
    }
    
    /**
     * Returns the thumbnail mode message image upload 3.
     *
     * @return string
     */
    public function getThumbnailModeMessageImageUpload3()
    {
        return $this->thumbnailModeMessageImageUpload3;
    }
    
    /**
     * Sets the thumbnail mode message image upload 3.
     *
     * @param string $thumbnailModeMessageImageUpload3
     *
     * @return void
     */
    public function setThumbnailModeMessageImageUpload3($thumbnailModeMessageImageUpload3)
    {
        if ($this->thumbnailModeMessageImageUpload3 !== $thumbnailModeMessageImageUpload3) {
            $this->thumbnailModeMessageImageUpload3 = isset($thumbnailModeMessageImageUpload3) ? $thumbnailModeMessageImageUpload3 : '';
        }
    }
    
    /**
     * Returns the thumbnail width message image upload 3 view.
     *
     * @return integer
     */
    public function getThumbnailWidthMessageImageUpload3View()
    {
        return $this->thumbnailWidthMessageImageUpload3View;
    }
    
    /**
     * Sets the thumbnail width message image upload 3 view.
     *
     * @param integer $thumbnailWidthMessageImageUpload3View
     *
     * @return void
     */
    public function setThumbnailWidthMessageImageUpload3View($thumbnailWidthMessageImageUpload3View)
    {
        if (intval($this->thumbnailWidthMessageImageUpload3View) !== intval($thumbnailWidthMessageImageUpload3View)) {
            $this->thumbnailWidthMessageImageUpload3View = intval($thumbnailWidthMessageImageUpload3View);
        }
    }
    
    /**
     * Returns the thumbnail height message image upload 3 view.
     *
     * @return integer
     */
    public function getThumbnailHeightMessageImageUpload3View()
    {
        return $this->thumbnailHeightMessageImageUpload3View;
    }
    
    /**
     * Sets the thumbnail height message image upload 3 view.
     *
     * @param integer $thumbnailHeightMessageImageUpload3View
     *
     * @return void
     */
    public function setThumbnailHeightMessageImageUpload3View($thumbnailHeightMessageImageUpload3View)
    {
        if (intval($this->thumbnailHeightMessageImageUpload3View) !== intval($thumbnailHeightMessageImageUpload3View)) {
            $this->thumbnailHeightMessageImageUpload3View = intval($thumbnailHeightMessageImageUpload3View);
        }
    }
    
    /**
     * Returns the thumbnail width message image upload 3 display.
     *
     * @return integer
     */
    public function getThumbnailWidthMessageImageUpload3Display()
    {
        return $this->thumbnailWidthMessageImageUpload3Display;
    }
    
    /**
     * Sets the thumbnail width message image upload 3 display.
     *
     * @param integer $thumbnailWidthMessageImageUpload3Display
     *
     * @return void
     */
    public function setThumbnailWidthMessageImageUpload3Display($thumbnailWidthMessageImageUpload3Display)
    {
        if (intval($this->thumbnailWidthMessageImageUpload3Display) !== intval($thumbnailWidthMessageImageUpload3Display)) {
            $this->thumbnailWidthMessageImageUpload3Display = intval($thumbnailWidthMessageImageUpload3Display);
        }
    }
    
    /**
     * Returns the thumbnail height message image upload 3 display.
     *
     * @return integer
     */
    public function getThumbnailHeightMessageImageUpload3Display()
    {
        return $this->thumbnailHeightMessageImageUpload3Display;
    }
    
    /**
     * Sets the thumbnail height message image upload 3 display.
     *
     * @param integer $thumbnailHeightMessageImageUpload3Display
     *
     * @return void
     */
    public function setThumbnailHeightMessageImageUpload3Display($thumbnailHeightMessageImageUpload3Display)
    {
        if (intval($this->thumbnailHeightMessageImageUpload3Display) !== intval($thumbnailHeightMessageImageUpload3Display)) {
            $this->thumbnailHeightMessageImageUpload3Display = intval($thumbnailHeightMessageImageUpload3Display);
        }
    }
    
    /**
     * Returns the thumbnail width message image upload 3 edit.
     *
     * @return integer
     */
    public function getThumbnailWidthMessageImageUpload3Edit()
    {
        return $this->thumbnailWidthMessageImageUpload3Edit;
    }
    
    /**
     * Sets the thumbnail width message image upload 3 edit.
     *
     * @param integer $thumbnailWidthMessageImageUpload3Edit
     *
     * @return void
     */
    public function setThumbnailWidthMessageImageUpload3Edit($thumbnailWidthMessageImageUpload3Edit)
    {
        if (intval($this->thumbnailWidthMessageImageUpload3Edit) !== intval($thumbnailWidthMessageImageUpload3Edit)) {
            $this->thumbnailWidthMessageImageUpload3Edit = intval($thumbnailWidthMessageImageUpload3Edit);
        }
    }
    
    /**
     * Returns the thumbnail height message image upload 3 edit.
     *
     * @return integer
     */
    public function getThumbnailHeightMessageImageUpload3Edit()
    {
        return $this->thumbnailHeightMessageImageUpload3Edit;
    }
    
    /**
     * Sets the thumbnail height message image upload 3 edit.
     *
     * @param integer $thumbnailHeightMessageImageUpload3Edit
     *
     * @return void
     */
    public function setThumbnailHeightMessageImageUpload3Edit($thumbnailHeightMessageImageUpload3Edit)
    {
        if (intval($this->thumbnailHeightMessageImageUpload3Edit) !== intval($thumbnailHeightMessageImageUpload3Edit)) {
            $this->thumbnailHeightMessageImageUpload3Edit = intval($thumbnailHeightMessageImageUpload3Edit);
        }
    }
    
    /**
     * Returns the enable shrinking for message image upload 4.
     *
     * @return boolean
     */
    public function getEnableShrinkingForMessageImageUpload4()
    {
        return $this->enableShrinkingForMessageImageUpload4;
    }
    
    /**
     * Sets the enable shrinking for message image upload 4.
     *
     * @param boolean $enableShrinkingForMessageImageUpload4
     *
     * @return void
     */
    public function setEnableShrinkingForMessageImageUpload4($enableShrinkingForMessageImageUpload4)
    {
        if (boolval($this->enableShrinkingForMessageImageUpload4) !== boolval($enableShrinkingForMessageImageUpload4)) {
            $this->enableShrinkingForMessageImageUpload4 = boolval($enableShrinkingForMessageImageUpload4);
        }
    }
    
    /**
     * Returns the shrink width message image upload 4.
     *
     * @return integer
     */
    public function getShrinkWidthMessageImageUpload4()
    {
        return $this->shrinkWidthMessageImageUpload4;
    }
    
    /**
     * Sets the shrink width message image upload 4.
     *
     * @param integer $shrinkWidthMessageImageUpload4
     *
     * @return void
     */
    public function setShrinkWidthMessageImageUpload4($shrinkWidthMessageImageUpload4)
    {
        if (intval($this->shrinkWidthMessageImageUpload4) !== intval($shrinkWidthMessageImageUpload4)) {
            $this->shrinkWidthMessageImageUpload4 = intval($shrinkWidthMessageImageUpload4);
        }
    }
    
    /**
     * Returns the shrink height message image upload 4.
     *
     * @return integer
     */
    public function getShrinkHeightMessageImageUpload4()
    {
        return $this->shrinkHeightMessageImageUpload4;
    }
    
    /**
     * Sets the shrink height message image upload 4.
     *
     * @param integer $shrinkHeightMessageImageUpload4
     *
     * @return void
     */
    public function setShrinkHeightMessageImageUpload4($shrinkHeightMessageImageUpload4)
    {
        if (intval($this->shrinkHeightMessageImageUpload4) !== intval($shrinkHeightMessageImageUpload4)) {
            $this->shrinkHeightMessageImageUpload4 = intval($shrinkHeightMessageImageUpload4);
        }
    }
    
    /**
     * Returns the thumbnail mode message image upload 4.
     *
     * @return string
     */
    public function getThumbnailModeMessageImageUpload4()
    {
        return $this->thumbnailModeMessageImageUpload4;
    }
    
    /**
     * Sets the thumbnail mode message image upload 4.
     *
     * @param string $thumbnailModeMessageImageUpload4
     *
     * @return void
     */
    public function setThumbnailModeMessageImageUpload4($thumbnailModeMessageImageUpload4)
    {
        if ($this->thumbnailModeMessageImageUpload4 !== $thumbnailModeMessageImageUpload4) {
            $this->thumbnailModeMessageImageUpload4 = isset($thumbnailModeMessageImageUpload4) ? $thumbnailModeMessageImageUpload4 : '';
        }
    }
    
    /**
     * Returns the thumbnail width message image upload 4 view.
     *
     * @return integer
     */
    public function getThumbnailWidthMessageImageUpload4View()
    {
        return $this->thumbnailWidthMessageImageUpload4View;
    }
    
    /**
     * Sets the thumbnail width message image upload 4 view.
     *
     * @param integer $thumbnailWidthMessageImageUpload4View
     *
     * @return void
     */
    public function setThumbnailWidthMessageImageUpload4View($thumbnailWidthMessageImageUpload4View)
    {
        if (intval($this->thumbnailWidthMessageImageUpload4View) !== intval($thumbnailWidthMessageImageUpload4View)) {
            $this->thumbnailWidthMessageImageUpload4View = intval($thumbnailWidthMessageImageUpload4View);
        }
    }
    
    /**
     * Returns the thumbnail height message image upload 4 view.
     *
     * @return integer
     */
    public function getThumbnailHeightMessageImageUpload4View()
    {
        return $this->thumbnailHeightMessageImageUpload4View;
    }
    
    /**
     * Sets the thumbnail height message image upload 4 view.
     *
     * @param integer $thumbnailHeightMessageImageUpload4View
     *
     * @return void
     */
    public function setThumbnailHeightMessageImageUpload4View($thumbnailHeightMessageImageUpload4View)
    {
        if (intval($this->thumbnailHeightMessageImageUpload4View) !== intval($thumbnailHeightMessageImageUpload4View)) {
            $this->thumbnailHeightMessageImageUpload4View = intval($thumbnailHeightMessageImageUpload4View);
        }
    }
    
    /**
     * Returns the thumbnail width message image upload 4 display.
     *
     * @return integer
     */
    public function getThumbnailWidthMessageImageUpload4Display()
    {
        return $this->thumbnailWidthMessageImageUpload4Display;
    }
    
    /**
     * Sets the thumbnail width message image upload 4 display.
     *
     * @param integer $thumbnailWidthMessageImageUpload4Display
     *
     * @return void
     */
    public function setThumbnailWidthMessageImageUpload4Display($thumbnailWidthMessageImageUpload4Display)
    {
        if (intval($this->thumbnailWidthMessageImageUpload4Display) !== intval($thumbnailWidthMessageImageUpload4Display)) {
            $this->thumbnailWidthMessageImageUpload4Display = intval($thumbnailWidthMessageImageUpload4Display);
        }
    }
    
    /**
     * Returns the thumbnail height message image upload 4 display.
     *
     * @return integer
     */
    public function getThumbnailHeightMessageImageUpload4Display()
    {
        return $this->thumbnailHeightMessageImageUpload4Display;
    }
    
    /**
     * Sets the thumbnail height message image upload 4 display.
     *
     * @param integer $thumbnailHeightMessageImageUpload4Display
     *
     * @return void
     */
    public function setThumbnailHeightMessageImageUpload4Display($thumbnailHeightMessageImageUpload4Display)
    {
        if (intval($this->thumbnailHeightMessageImageUpload4Display) !== intval($thumbnailHeightMessageImageUpload4Display)) {
            $this->thumbnailHeightMessageImageUpload4Display = intval($thumbnailHeightMessageImageUpload4Display);
        }
    }
    
    /**
     * Returns the thumbnail width message image upload 4 edit.
     *
     * @return integer
     */
    public function getThumbnailWidthMessageImageUpload4Edit()
    {
        return $this->thumbnailWidthMessageImageUpload4Edit;
    }
    
    /**
     * Sets the thumbnail width message image upload 4 edit.
     *
     * @param integer $thumbnailWidthMessageImageUpload4Edit
     *
     * @return void
     */
    public function setThumbnailWidthMessageImageUpload4Edit($thumbnailWidthMessageImageUpload4Edit)
    {
        if (intval($this->thumbnailWidthMessageImageUpload4Edit) !== intval($thumbnailWidthMessageImageUpload4Edit)) {
            $this->thumbnailWidthMessageImageUpload4Edit = intval($thumbnailWidthMessageImageUpload4Edit);
        }
    }
    
    /**
     * Returns the thumbnail height message image upload 4 edit.
     *
     * @return integer
     */
    public function getThumbnailHeightMessageImageUpload4Edit()
    {
        return $this->thumbnailHeightMessageImageUpload4Edit;
    }
    
    /**
     * Sets the thumbnail height message image upload 4 edit.
     *
     * @param integer $thumbnailHeightMessageImageUpload4Edit
     *
     * @return void
     */
    public function setThumbnailHeightMessageImageUpload4Edit($thumbnailHeightMessageImageUpload4Edit)
    {
        if (intval($this->thumbnailHeightMessageImageUpload4Edit) !== intval($thumbnailHeightMessageImageUpload4Edit)) {
            $this->thumbnailHeightMessageImageUpload4Edit = intval($thumbnailHeightMessageImageUpload4Edit);
        }
    }
    
    /**
     * Returns the enable shrinking for image the file.
     *
     * @return boolean
     */
    public function getEnableShrinkingForImageTheFile()
    {
        return $this->enableShrinkingForImageTheFile;
    }
    
    /**
     * Sets the enable shrinking for image the file.
     *
     * @param boolean $enableShrinkingForImageTheFile
     *
     * @return void
     */
    public function setEnableShrinkingForImageTheFile($enableShrinkingForImageTheFile)
    {
        if (boolval($this->enableShrinkingForImageTheFile) !== boolval($enableShrinkingForImageTheFile)) {
            $this->enableShrinkingForImageTheFile = boolval($enableShrinkingForImageTheFile);
        }
    }
    
    /**
     * Returns the shrink width image the file.
     *
     * @return integer
     */
    public function getShrinkWidthImageTheFile()
    {
        return $this->shrinkWidthImageTheFile;
    }
    
    /**
     * Sets the shrink width image the file.
     *
     * @param integer $shrinkWidthImageTheFile
     *
     * @return void
     */
    public function setShrinkWidthImageTheFile($shrinkWidthImageTheFile)
    {
        if (intval($this->shrinkWidthImageTheFile) !== intval($shrinkWidthImageTheFile)) {
            $this->shrinkWidthImageTheFile = intval($shrinkWidthImageTheFile);
        }
    }
    
    /**
     * Returns the shrink height image the file.
     *
     * @return integer
     */
    public function getShrinkHeightImageTheFile()
    {
        return $this->shrinkHeightImageTheFile;
    }
    
    /**
     * Sets the shrink height image the file.
     *
     * @param integer $shrinkHeightImageTheFile
     *
     * @return void
     */
    public function setShrinkHeightImageTheFile($shrinkHeightImageTheFile)
    {
        if (intval($this->shrinkHeightImageTheFile) !== intval($shrinkHeightImageTheFile)) {
            $this->shrinkHeightImageTheFile = intval($shrinkHeightImageTheFile);
        }
    }
    
    /**
     * Returns the thumbnail mode image the file.
     *
     * @return string
     */
    public function getThumbnailModeImageTheFile()
    {
        return $this->thumbnailModeImageTheFile;
    }
    
    /**
     * Sets the thumbnail mode image the file.
     *
     * @param string $thumbnailModeImageTheFile
     *
     * @return void
     */
    public function setThumbnailModeImageTheFile($thumbnailModeImageTheFile)
    {
        if ($this->thumbnailModeImageTheFile !== $thumbnailModeImageTheFile) {
            $this->thumbnailModeImageTheFile = isset($thumbnailModeImageTheFile) ? $thumbnailModeImageTheFile : '';
        }
    }
    
    /**
     * Returns the moderation group for messages.
     *
     * @return integer
     */
    public function getModerationGroupForMessages()
    {
        return $this->moderationGroupForMessages;
    }
    
    /**
     * Sets the moderation group for messages.
     *
     * @param integer $moderationGroupForMessages
     *
     * @return void
     */
    public function setModerationGroupForMessages($moderationGroupForMessages)
    {
        if ($this->moderationGroupForMessages !== $moderationGroupForMessages) {
            $this->moderationGroupForMessages = $moderationGroupForMessages;
        }
    }
    
    /**
     * Returns the allow moderation specific creator for message.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreatorForMessage()
    {
        return $this->allowModerationSpecificCreatorForMessage;
    }
    
    /**
     * Sets the allow moderation specific creator for message.
     *
     * @param boolean $allowModerationSpecificCreatorForMessage
     *
     * @return void
     */
    public function setAllowModerationSpecificCreatorForMessage($allowModerationSpecificCreatorForMessage)
    {
        if (boolval($this->allowModerationSpecificCreatorForMessage) !== boolval($allowModerationSpecificCreatorForMessage)) {
            $this->allowModerationSpecificCreatorForMessage = boolval($allowModerationSpecificCreatorForMessage);
        }
    }
    
    /**
     * Returns the allow moderation specific creation date for message.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreationDateForMessage()
    {
        return $this->allowModerationSpecificCreationDateForMessage;
    }
    
    /**
     * Sets the allow moderation specific creation date for message.
     *
     * @param boolean $allowModerationSpecificCreationDateForMessage
     *
     * @return void
     */
    public function setAllowModerationSpecificCreationDateForMessage($allowModerationSpecificCreationDateForMessage)
    {
        if (boolval($this->allowModerationSpecificCreationDateForMessage) !== boolval($allowModerationSpecificCreationDateForMessage)) {
            $this->allowModerationSpecificCreationDateForMessage = boolval($allowModerationSpecificCreationDateForMessage);
        }
    }
    
    /**
     * Returns the enabled finder types.
     *
     * @return string
     */
    public function getEnabledFinderTypes()
    {
        return $this->enabledFinderTypes;
    }
    
    /**
     * Sets the enabled finder types.
     *
     * @param string $enabledFinderTypes
     *
     * @return void
     */
    public function setEnabledFinderTypes($enabledFinderTypes)
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = isset($enabledFinderTypes) ? $enabledFinderTypes : '';
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('MUNewsModule');
    
        if (isset($moduleVars['enableAttribution'])) {
            $this->setEnableAttribution($moduleVars['enableAttribution']);
        }
        if (isset($moduleVars['enableMultiLanguage'])) {
            $this->setEnableMultiLanguage($moduleVars['enableMultiLanguage']);
        }
        if (isset($moduleVars['showAuthor'])) {
            $this->setShowAuthor($moduleVars['showAuthor']);
        }
        if (isset($moduleVars['showDate'])) {
            $this->setShowDate($moduleVars['showDate']);
        }
        if (isset($moduleVars['enableCategorization'])) {
            $this->setEnableCategorization($moduleVars['enableCategorization']);
        }
        if (isset($moduleVars['defaultMessageSorting'])) {
            $this->setDefaultMessageSorting($moduleVars['defaultMessageSorting']);
        }
        if (isset($moduleVars['defaultMessageSortingBackend'])) {
            $this->setDefaultMessageSortingBackend($moduleVars['defaultMessageSortingBackend']);
        }
        if (isset($moduleVars['sortingDirection'])) {
            $this->setSortingDirection($moduleVars['sortingDirection']);
        }
        if (isset($moduleVars['enableMoreMessagesInCategory'])) {
            $this->setEnableMoreMessagesInCategory($moduleVars['enableMoreMessagesInCategory']);
        }
        if (isset($moduleVars['amountOfMoreArticlesInCategory'])) {
            $this->setAmountOfMoreArticlesInCategory($moduleVars['amountOfMoreArticlesInCategory']);
        }
        if (isset($moduleVars['displayPdfLink'])) {
            $this->setDisplayPdfLink($moduleVars['displayPdfLink']);
        }
        if (isset($moduleVars['enablePictureUpload'])) {
            $this->setEnablePictureUpload($moduleVars['enablePictureUpload']);
        }
        if (isset($moduleVars['imageFloatOnViewPage'])) {
            $this->setImageFloatOnViewPage($moduleVars['imageFloatOnViewPage']);
        }
        if (isset($moduleVars['imageFloatOnDisplayPage'])) {
            $this->setImageFloatOnDisplayPage($moduleVars['imageFloatOnDisplayPage']);
        }
        if (isset($moduleVars['maxSize'])) {
            $this->setMaxSize($moduleVars['maxSize']);
        }
        if (isset($moduleVars['messageEntriesPerPage'])) {
            $this->setMessageEntriesPerPage($moduleVars['messageEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnMessagesOnAccountPage'])) {
            $this->setLinkOwnMessagesOnAccountPage($moduleVars['linkOwnMessagesOnAccountPage']);
        }
        if (isset($moduleVars['showOnlyOwnEntries'])) {
            $this->setShowOnlyOwnEntries($moduleVars['showOnlyOwnEntries']);
        }
        if (isset($moduleVars['filterDataByLocale'])) {
            $this->setFilterDataByLocale($moduleVars['filterDataByLocale']);
        }
        if (isset($moduleVars['enableShrinkingForMessageImageUpload1'])) {
            $this->setEnableShrinkingForMessageImageUpload1($moduleVars['enableShrinkingForMessageImageUpload1']);
        }
        if (isset($moduleVars['shrinkWidthMessageImageUpload1'])) {
            $this->setShrinkWidthMessageImageUpload1($moduleVars['shrinkWidthMessageImageUpload1']);
        }
        if (isset($moduleVars['shrinkHeightMessageImageUpload1'])) {
            $this->setShrinkHeightMessageImageUpload1($moduleVars['shrinkHeightMessageImageUpload1']);
        }
        if (isset($moduleVars['thumbnailModeMessageImageUpload1'])) {
            $this->setThumbnailModeMessageImageUpload1($moduleVars['thumbnailModeMessageImageUpload1']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload1View'])) {
            $this->setThumbnailWidthMessageImageUpload1View($moduleVars['thumbnailWidthMessageImageUpload1View']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload1View'])) {
            $this->setThumbnailHeightMessageImageUpload1View($moduleVars['thumbnailHeightMessageImageUpload1View']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload1Display'])) {
            $this->setThumbnailWidthMessageImageUpload1Display($moduleVars['thumbnailWidthMessageImageUpload1Display']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload1Display'])) {
            $this->setThumbnailHeightMessageImageUpload1Display($moduleVars['thumbnailHeightMessageImageUpload1Display']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload1Edit'])) {
            $this->setThumbnailWidthMessageImageUpload1Edit($moduleVars['thumbnailWidthMessageImageUpload1Edit']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload1Edit'])) {
            $this->setThumbnailHeightMessageImageUpload1Edit($moduleVars['thumbnailHeightMessageImageUpload1Edit']);
        }
        if (isset($moduleVars['enableShrinkingForMessageImageUpload2'])) {
            $this->setEnableShrinkingForMessageImageUpload2($moduleVars['enableShrinkingForMessageImageUpload2']);
        }
        if (isset($moduleVars['shrinkWidthMessageImageUpload2'])) {
            $this->setShrinkWidthMessageImageUpload2($moduleVars['shrinkWidthMessageImageUpload2']);
        }
        if (isset($moduleVars['shrinkHeightMessageImageUpload2'])) {
            $this->setShrinkHeightMessageImageUpload2($moduleVars['shrinkHeightMessageImageUpload2']);
        }
        if (isset($moduleVars['thumbnailModeMessageImageUpload2'])) {
            $this->setThumbnailModeMessageImageUpload2($moduleVars['thumbnailModeMessageImageUpload2']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload2View'])) {
            $this->setThumbnailWidthMessageImageUpload2View($moduleVars['thumbnailWidthMessageImageUpload2View']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload2View'])) {
            $this->setThumbnailHeightMessageImageUpload2View($moduleVars['thumbnailHeightMessageImageUpload2View']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload2Display'])) {
            $this->setThumbnailWidthMessageImageUpload2Display($moduleVars['thumbnailWidthMessageImageUpload2Display']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload2Display'])) {
            $this->setThumbnailHeightMessageImageUpload2Display($moduleVars['thumbnailHeightMessageImageUpload2Display']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload2Edit'])) {
            $this->setThumbnailWidthMessageImageUpload2Edit($moduleVars['thumbnailWidthMessageImageUpload2Edit']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload2Edit'])) {
            $this->setThumbnailHeightMessageImageUpload2Edit($moduleVars['thumbnailHeightMessageImageUpload2Edit']);
        }
        if (isset($moduleVars['enableShrinkingForMessageImageUpload3'])) {
            $this->setEnableShrinkingForMessageImageUpload3($moduleVars['enableShrinkingForMessageImageUpload3']);
        }
        if (isset($moduleVars['shrinkWidthMessageImageUpload3'])) {
            $this->setShrinkWidthMessageImageUpload3($moduleVars['shrinkWidthMessageImageUpload3']);
        }
        if (isset($moduleVars['shrinkHeightMessageImageUpload3'])) {
            $this->setShrinkHeightMessageImageUpload3($moduleVars['shrinkHeightMessageImageUpload3']);
        }
        if (isset($moduleVars['thumbnailModeMessageImageUpload3'])) {
            $this->setThumbnailModeMessageImageUpload3($moduleVars['thumbnailModeMessageImageUpload3']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload3View'])) {
            $this->setThumbnailWidthMessageImageUpload3View($moduleVars['thumbnailWidthMessageImageUpload3View']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload3View'])) {
            $this->setThumbnailHeightMessageImageUpload3View($moduleVars['thumbnailHeightMessageImageUpload3View']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload3Display'])) {
            $this->setThumbnailWidthMessageImageUpload3Display($moduleVars['thumbnailWidthMessageImageUpload3Display']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload3Display'])) {
            $this->setThumbnailHeightMessageImageUpload3Display($moduleVars['thumbnailHeightMessageImageUpload3Display']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload3Edit'])) {
            $this->setThumbnailWidthMessageImageUpload3Edit($moduleVars['thumbnailWidthMessageImageUpload3Edit']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload3Edit'])) {
            $this->setThumbnailHeightMessageImageUpload3Edit($moduleVars['thumbnailHeightMessageImageUpload3Edit']);
        }
        if (isset($moduleVars['enableShrinkingForMessageImageUpload4'])) {
            $this->setEnableShrinkingForMessageImageUpload4($moduleVars['enableShrinkingForMessageImageUpload4']);
        }
        if (isset($moduleVars['shrinkWidthMessageImageUpload4'])) {
            $this->setShrinkWidthMessageImageUpload4($moduleVars['shrinkWidthMessageImageUpload4']);
        }
        if (isset($moduleVars['shrinkHeightMessageImageUpload4'])) {
            $this->setShrinkHeightMessageImageUpload4($moduleVars['shrinkHeightMessageImageUpload4']);
        }
        if (isset($moduleVars['thumbnailModeMessageImageUpload4'])) {
            $this->setThumbnailModeMessageImageUpload4($moduleVars['thumbnailModeMessageImageUpload4']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload4View'])) {
            $this->setThumbnailWidthMessageImageUpload4View($moduleVars['thumbnailWidthMessageImageUpload4View']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload4View'])) {
            $this->setThumbnailHeightMessageImageUpload4View($moduleVars['thumbnailHeightMessageImageUpload4View']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload4Display'])) {
            $this->setThumbnailWidthMessageImageUpload4Display($moduleVars['thumbnailWidthMessageImageUpload4Display']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload4Display'])) {
            $this->setThumbnailHeightMessageImageUpload4Display($moduleVars['thumbnailHeightMessageImageUpload4Display']);
        }
        if (isset($moduleVars['thumbnailWidthMessageImageUpload4Edit'])) {
            $this->setThumbnailWidthMessageImageUpload4Edit($moduleVars['thumbnailWidthMessageImageUpload4Edit']);
        }
        if (isset($moduleVars['thumbnailHeightMessageImageUpload4Edit'])) {
            $this->setThumbnailHeightMessageImageUpload4Edit($moduleVars['thumbnailHeightMessageImageUpload4Edit']);
        }
        if (isset($moduleVars['enableShrinkingForImageTheFile'])) {
            $this->setEnableShrinkingForImageTheFile($moduleVars['enableShrinkingForImageTheFile']);
        }
        if (isset($moduleVars['shrinkWidthImageTheFile'])) {
            $this->setShrinkWidthImageTheFile($moduleVars['shrinkWidthImageTheFile']);
        }
        if (isset($moduleVars['shrinkHeightImageTheFile'])) {
            $this->setShrinkHeightImageTheFile($moduleVars['shrinkHeightImageTheFile']);
        }
        if (isset($moduleVars['thumbnailModeImageTheFile'])) {
            $this->setThumbnailModeImageTheFile($moduleVars['thumbnailModeImageTheFile']);
        }
        if (isset($moduleVars['moderationGroupForMessages'])) {
            $this->setModerationGroupForMessages($moduleVars['moderationGroupForMessages']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForMessage'])) {
            $this->setAllowModerationSpecificCreatorForMessage($moduleVars['allowModerationSpecificCreatorForMessage']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForMessage'])) {
            $this->setAllowModerationSpecificCreationDateForMessage($moduleVars['allowModerationSpecificCreationDateForMessage']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    
        // prepare group selectors, fallback to admin group for undefined values
        $adminGroupId = GroupsConstant::GROUP_ID_ADMIN;
        $groupId = $this->getModerationGroupForMessages();
        if ($groupId < 1) {
            $groupId = $adminGroupId;
        }
    
        $this->setModerationGroupForMessages($this->groupRepository->find($groupId));
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        // normalise group selector values
        $group = $this->getModerationGroupForMessages();
        $group = is_object($group) ? $group->getGid() : intval($group);
        $this->setModerationGroupForMessages($group);
    
        $this->variableApi->set('MUNewsModule', 'enableAttribution', $this->getEnableAttribution());
        $this->variableApi->set('MUNewsModule', 'enableMultiLanguage', $this->getEnableMultiLanguage());
        $this->variableApi->set('MUNewsModule', 'showAuthor', $this->getShowAuthor());
        $this->variableApi->set('MUNewsModule', 'showDate', $this->getShowDate());
        $this->variableApi->set('MUNewsModule', 'enableCategorization', $this->getEnableCategorization());
        $this->variableApi->set('MUNewsModule', 'defaultMessageSorting', $this->getDefaultMessageSorting());
        $this->variableApi->set('MUNewsModule', 'defaultMessageSortingBackend', $this->getDefaultMessageSortingBackend());
        $this->variableApi->set('MUNewsModule', 'sortingDirection', $this->getSortingDirection());
        $this->variableApi->set('MUNewsModule', 'enableMoreMessagesInCategory', $this->getEnableMoreMessagesInCategory());
        $this->variableApi->set('MUNewsModule', 'amountOfMoreArticlesInCategory', $this->getAmountOfMoreArticlesInCategory());
        $this->variableApi->set('MUNewsModule', 'displayPdfLink', $this->getDisplayPdfLink());
        $this->variableApi->set('MUNewsModule', 'enablePictureUpload', $this->getEnablePictureUpload());
        $this->variableApi->set('MUNewsModule', 'imageFloatOnViewPage', $this->getImageFloatOnViewPage());
        $this->variableApi->set('MUNewsModule', 'imageFloatOnDisplayPage', $this->getImageFloatOnDisplayPage());
        $this->variableApi->set('MUNewsModule', 'maxSize', $this->getMaxSize());
        $this->variableApi->set('MUNewsModule', 'messageEntriesPerPage', $this->getMessageEntriesPerPage());
        $this->variableApi->set('MUNewsModule', 'linkOwnMessagesOnAccountPage', $this->getLinkOwnMessagesOnAccountPage());
        $this->variableApi->set('MUNewsModule', 'showOnlyOwnEntries', $this->getShowOnlyOwnEntries());
        $this->variableApi->set('MUNewsModule', 'filterDataByLocale', $this->getFilterDataByLocale());
        $this->variableApi->set('MUNewsModule', 'enableShrinkingForMessageImageUpload1', $this->getEnableShrinkingForMessageImageUpload1());
        $this->variableApi->set('MUNewsModule', 'shrinkWidthMessageImageUpload1', $this->getShrinkWidthMessageImageUpload1());
        $this->variableApi->set('MUNewsModule', 'shrinkHeightMessageImageUpload1', $this->getShrinkHeightMessageImageUpload1());
        $this->variableApi->set('MUNewsModule', 'thumbnailModeMessageImageUpload1', $this->getThumbnailModeMessageImageUpload1());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload1View', $this->getThumbnailWidthMessageImageUpload1View());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload1View', $this->getThumbnailHeightMessageImageUpload1View());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload1Display', $this->getThumbnailWidthMessageImageUpload1Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload1Display', $this->getThumbnailHeightMessageImageUpload1Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload1Edit', $this->getThumbnailWidthMessageImageUpload1Edit());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload1Edit', $this->getThumbnailHeightMessageImageUpload1Edit());
        $this->variableApi->set('MUNewsModule', 'enableShrinkingForMessageImageUpload2', $this->getEnableShrinkingForMessageImageUpload2());
        $this->variableApi->set('MUNewsModule', 'shrinkWidthMessageImageUpload2', $this->getShrinkWidthMessageImageUpload2());
        $this->variableApi->set('MUNewsModule', 'shrinkHeightMessageImageUpload2', $this->getShrinkHeightMessageImageUpload2());
        $this->variableApi->set('MUNewsModule', 'thumbnailModeMessageImageUpload2', $this->getThumbnailModeMessageImageUpload2());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload2View', $this->getThumbnailWidthMessageImageUpload2View());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload2View', $this->getThumbnailHeightMessageImageUpload2View());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload2Display', $this->getThumbnailWidthMessageImageUpload2Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload2Display', $this->getThumbnailHeightMessageImageUpload2Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload2Edit', $this->getThumbnailWidthMessageImageUpload2Edit());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload2Edit', $this->getThumbnailHeightMessageImageUpload2Edit());
        $this->variableApi->set('MUNewsModule', 'enableShrinkingForMessageImageUpload3', $this->getEnableShrinkingForMessageImageUpload3());
        $this->variableApi->set('MUNewsModule', 'shrinkWidthMessageImageUpload3', $this->getShrinkWidthMessageImageUpload3());
        $this->variableApi->set('MUNewsModule', 'shrinkHeightMessageImageUpload3', $this->getShrinkHeightMessageImageUpload3());
        $this->variableApi->set('MUNewsModule', 'thumbnailModeMessageImageUpload3', $this->getThumbnailModeMessageImageUpload3());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload3View', $this->getThumbnailWidthMessageImageUpload3View());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload3View', $this->getThumbnailHeightMessageImageUpload3View());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload3Display', $this->getThumbnailWidthMessageImageUpload3Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload3Display', $this->getThumbnailHeightMessageImageUpload3Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload3Edit', $this->getThumbnailWidthMessageImageUpload3Edit());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload3Edit', $this->getThumbnailHeightMessageImageUpload3Edit());
        $this->variableApi->set('MUNewsModule', 'enableShrinkingForMessageImageUpload4', $this->getEnableShrinkingForMessageImageUpload4());
        $this->variableApi->set('MUNewsModule', 'shrinkWidthMessageImageUpload4', $this->getShrinkWidthMessageImageUpload4());
        $this->variableApi->set('MUNewsModule', 'shrinkHeightMessageImageUpload4', $this->getShrinkHeightMessageImageUpload4());
        $this->variableApi->set('MUNewsModule', 'thumbnailModeMessageImageUpload4', $this->getThumbnailModeMessageImageUpload4());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload4View', $this->getThumbnailWidthMessageImageUpload4View());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload4View', $this->getThumbnailHeightMessageImageUpload4View());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload4Display', $this->getThumbnailWidthMessageImageUpload4Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload4Display', $this->getThumbnailHeightMessageImageUpload4Display());
        $this->variableApi->set('MUNewsModule', 'thumbnailWidthMessageImageUpload4Edit', $this->getThumbnailWidthMessageImageUpload4Edit());
        $this->variableApi->set('MUNewsModule', 'thumbnailHeightMessageImageUpload4Edit', $this->getThumbnailHeightMessageImageUpload4Edit());
        $this->variableApi->set('MUNewsModule', 'enableShrinkingForImageTheFile', $this->getEnableShrinkingForImageTheFile());
        $this->variableApi->set('MUNewsModule', 'shrinkWidthImageTheFile', $this->getShrinkWidthImageTheFile());
        $this->variableApi->set('MUNewsModule', 'shrinkHeightImageTheFile', $this->getShrinkHeightImageTheFile());
        $this->variableApi->set('MUNewsModule', 'thumbnailModeImageTheFile', $this->getThumbnailModeImageTheFile());
        $this->variableApi->set('MUNewsModule', 'moderationGroupForMessages', $this->getModerationGroupForMessages());
        $this->variableApi->set('MUNewsModule', 'allowModerationSpecificCreatorForMessage', $this->getAllowModerationSpecificCreatorForMessage());
        $this->variableApi->set('MUNewsModule', 'allowModerationSpecificCreationDateForMessage', $this->getAllowModerationSpecificCreationDateForMessage());
        $this->variableApi->set('MUNewsModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
