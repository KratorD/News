<?php
/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\NewsModule\Helper;

use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;

use MU\NewsModule\Helper\Base\AbstractFeatureActivationHelper;

/**
 * Helper implementation class for dynamic feature enablement methods.
 */
class FeatureActivationHelper extends AbstractFeatureActivationHelper
{
	/**
	 * CREATORS feature
	 */
	const CREATORS = 'creators';
	
	/**
	 * CREATEDDATES feature
	 */
	const CREATEDDATES = 'createddates';
	
	/**
	 * @var VariableApiInterface
	 */
	private $variableApi;
	
	public function __construct(VariableApiInterface $variableApi)
	{
		$this->variableApi = $variableApi;
	}
	
	/**
	 * This method checks whether a certain feature is enabled for a given entity type or not.
	 *
	 * @param string $feature     Name of requested feature
	 * @param string $objectType  Currently treated entity type
	 *
	 * @return boolean True if the feature is enabled, false otherwise
	 */
	public function isEnabled($feature, $objectType)
	{
		if ($feature == self::CATEGORIES) {
			$method = 'hasCategories';
			if (method_exists($this, $method)) {
				return $this->$method($objectType);
			}
	
			return in_array($objectType, ['message']);
		}
		if ($feature == self::ATTRIBUTES) {
			$method = 'hasAttributes';
			if (method_exists($this, $method)) {
				return $this->$method($objectType);
			}
	
			return in_array($objectType, ['message']);
		}
		if ($feature == self::TRANSLATIONS) {
			$method = 'hasTranslations';
			if (method_exists($this, $method)) {
				return $this->$method($objectType);
			}
	
			return in_array($objectType, ['message']);
		}
		
		if ($feature == self::CREATORS) {
			$method = 'hasCreators';
			if (method_exists($this, $method)) {
				return $this->$method($objectType);
			}
		
			return in_array($objectType, ['message']);
		}
		
		if ($feature == self::CREATEDDATES) {
			$method = 'hasCreatedDates';
			if (method_exists($this, $method)) {
				return $this->$method($objectType);
			}
		
			return in_array($objectType, ['message']);
		}
	
		return false;
	}
	
    public function hasCategories($objectType)
    {
    	return $objectType == 'message' && $this->variableApi->get('MUNewsModule', 'enableCategorization') == 1;
    }
    
    public function hasAttributes($objectType)
    {
    	return $objectType == 'message' && $this->variableApi->get('MUNewsModule', 'enableAttribution') == 1;
    }
    
    public function hasTranslations($objectType)
    {
    	return $objectType == 'message' && $this->variableApi->get('MUNewsModule', 'enableMultiLanguage') == 1;
    }
    
    public function hasCreators($objectType)
    {
    	return $objectType == 'message' && $this->variableApi->get('MUNewsModule', 'showAuthor') == 1;
    }
    
    public function hasCreatedDates($objectType)
    {
    	return $objectType == 'message' && $this->variableApi->get('MUNewsModule', 'showDate') == 1;
    }
}
