<?php
/**
 * News.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\NewsModule\Helper\Base;

use Doctrine\ORM\QueryBuilder;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Zikula\UsersModule\Api\ApiInterface\CurrentUserApiInterface;
use Zikula\UsersModule\Constant as UsersConstant;
use MU\NewsModule\Entity\MessageEntity;
use MU\NewsModule\Helper\CategoryHelper;

/**
 * Entity collection filter helper base class.
 */
abstract class AbstractCollectionFilterHelper
{
    /**
     * @var Request
     */
    protected $request;

    /**
     * @var CurrentUserApiInterface
     */
    protected $currentUserApi;

    /**
     * @var CategoryHelper
     */
    protected $categoryHelper;

    /**
     * @var bool Fallback value to determine whether only own entries should be selected or not
     */
    protected $showOnlyOwnEntries = false;

    /**
     * @var bool Whether to apply a locale-based filter or not
     */
    protected $filterDataByLocale = false;

    /**
     * CollectionFilterHelper constructor.
     *
     * @param RequestStack   $requestStack        RequestStack service instance
     * @param CurrentUserApiInterface $currentUserApi CurrentUserApi service instance
     * @param CategoryHelper $categoryHelper      CategoryHelper service instance
     * @param boolean        $showOnlyOwnEntries  Fallback value to determine whether only own entries should be selected or not
     * @param boolean        $filterDataByLocale  Whether to apply a locale-based filter or not
     */
    public function __construct(
        RequestStack $requestStack,
        CurrentUserApiInterface $currentUserApi,
        CategoryHelper $categoryHelper,
        $showOnlyOwnEntries,
        $filterDataByLocale
    ) {
        $this->request = $requestStack->getCurrentRequest();
        $this->currentUserApi = $currentUserApi;
        $this->categoryHelper = $categoryHelper;
        $this->showOnlyOwnEntries = $showOnlyOwnEntries;
        $this->filterDataByLocale = $filterDataByLocale;
    }

    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $objectType Name of treated entity type
     * @param string $context    Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args       Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    public function getViewQuickNavParameters($objectType = '', $context = '', array $args = [])
    {
        if (!in_array($context, ['controllerAction', 'api', 'actionHandler', 'block', 'contentType'])) {
            $context = 'controllerAction';
        }
    
        if ($objectType == 'message') {
            return $this->getViewQuickNavParametersForMessage($context, $args);
        }
    
        return [];
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param string       $objectType Name of treated entity type
     * @param QueryBuilder $qb         Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    public function addCommonViewFilters($objectType, QueryBuilder $qb)
    {
        if ($objectType == 'message') {
            return $this->addCommonViewFiltersForMessage($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param string       $objectType Name of treated entity type
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    public function applyDefaultFilters($objectType, QueryBuilder $qb, array $parameters = [])
    {
        if ($objectType == 'message') {
            return $this->applyDefaultFiltersForMessage($qb, $parameters);
        }
    
        return $qb;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForMessage($context = '', array $args = [])
    {
        $parameters = [];
        if (null === $this->request) {
            return $parameters;
        }
    
        $parameters['catId'] = $this->request->query->get('catId', '');
        $parameters['catIdList'] = $this->categoryHelper->retrieveCategoriesFromRequest('message', 'GET');
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['approver'] = $this->request->query->getInt('approver', 0);
        $parameters['messageLanguage'] = $this->request->query->get('messageLanguage', '');
        $parameters['q'] = $this->request->query->get('q', '');
        $parameters['displayOnIndex'] = $this->request->query->get('displayOnIndex', '');
        $parameters['allowComments'] = $this->request->query->get('allowComments', '');
        $parameters['noEndDate'] = $this->request->query->get('noEndDate', '');
    
        return $parameters;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForMessage(QueryBuilder $qb)
    {
        if (null === $this->request) {
            return $qb;
        }
        $routeName = $this->request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForMessage();
        foreach ($parameters as $k => $v) {
            if ($k == 'catId') {
                if (intval($v) > 0) {
                    // single category filter
                    $qb->andWhere('tblCategories.category = :category')
                       ->setParameter('category', $v);
                }
                continue;
            }
            if ($k == 'catIdList') {
                // multi category filter
                $qb = $this->categoryHelper->buildFilterClauses($qb, 'message', $v);
                continue;
            }
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $qb = $this->addSearchFilter('message', $qb, $v);
                }
                continue;
            }
            if (in_array($k, ['displayOnIndex', 'allowComments', 'noEndDate'])) {
                // boolean filter
                if ($v == 'no') {
                    $qb->andWhere('tbl.' . $k . ' = 0');
                } elseif ($v == 'yes' || $v == '1') {
                    $qb->andWhere('tbl.' . $k . ' = 1');
                }
            }
    
            if (is_array($v)) {
                continue;
            }
    
            // field filter
            if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                    $qb->andWhere('tbl.' . $k . ' != :' . $k)
                       ->setParameter($k, substr($v, 1, strlen($v)-1));
                } elseif (substr($v, 0, 1) == '%') {
                    $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                       ->setParameter($k, '%' . substr($v, 1) . '%');
                } else {
                    if (in_array($k, ['approver'])) {
                        $qb->leftJoin('tbl.' . $k, 'tbl' . ucfirst($k))
                           ->andWhere('tbl' . ucfirst($k) . '.uid = :' . $k)
                           ->setParameter($k, $v);
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                    }
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForMessage($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForMessage(QueryBuilder $qb, array $parameters = [])
    {
        if (null === $this->request) {
            return $qb;
        }
        $routeName = $this->request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'munewsmodule_message_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$this->request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if (!in_array('workflowState', array_keys($parameters)) || empty($parameters['workflowState'])) {
            // per default we show approved messages only
            $onlineStates = ['approved'];
            $qb->andWhere('tbl.workflowState IN (:onlineStates)')
               ->setParameter('onlineStates', $onlineStates);
        }
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
    
        if (true === (bool)$this->filterDataByLocale) {
            $allowedLocales = ['', $this->request->getLocale()];
            if (!in_array('messageLanguage', array_keys($parameters)) || empty($parameters['messageLanguage'])) {
                $qb->andWhere('tbl.messageLanguage IN (:currentMessageLanguage)')
                   ->setParameter('currentMessageLanguage', $allowedLocales);
            }
        }
    
        $qb = $this->applyDateRangeFilterForMessage($qb);
    
        return $qb;
    }
    
    /**
     * Applies start and end date filters for selecting messages.
     *
     * @param QueryBuilder $qb    Query builder to be enhanced
     * @param string       $alias Table alias
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDateRangeFilterForMessage(QueryBuilder $qb, $alias = 'tbl')
    {
        $startDate = $this->request->query->get('startDate', date('Y-m-d H:i:s'));
        $qb->andWhere('(' . $alias . '.startDate <= :startDate OR ' . $alias . '.startDate IS NULL)')
           ->setParameter('startDate', $startDate);
    
        $endDate = $this->request->query->get('endDate', date('Y-m-d H:i:s'));
        $qb->andWhere('(' . $alias . '.endDate >= :endDate OR ' . $alias . '.endDate IS NULL)')
           ->setParameter('endDate', $endDate);
    
        return $qb;
    }
    
    /**
     * Adds a where clause for search query.
     *
     * @param string       $objectType Name of treated entity type
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param string       $fragment   The fragment to search for
     *
     * @return QueryBuilder Enriched query builder instance
     */
    public function addSearchFilter($objectType, QueryBuilder $qb, $fragment = '')
    {
        if ($fragment == '') {
            return $qb;
        }
    
        $filters = [];
        $parameters = [];
    
        if ($objectType == 'message') {
            $filters[] = 'tbl.workflowState = :searchWorkflowState';
            $parameters['searchWorkflowState'] = $fragment;
            $filters[] = 'tbl.title LIKE :searchTitle';
            $parameters['searchTitle'] = '%' . $fragment . '%';
            $filters[] = 'tbl.startText LIKE :searchStartText';
            $parameters['searchStartText'] = '%' . $fragment . '%';
            $filters[] = 'tbl.imageUpload1 = :searchImageUpload1';
            $parameters['searchImageUpload1'] = $fragment;
            $filters[] = 'tbl.mainText LIKE :searchMainText';
            $parameters['searchMainText'] = '%' . $fragment . '%';
            $filters[] = 'tbl.amountOfViews = :searchAmountOfViews';
            $parameters['searchAmountOfViews'] = $fragment;
            $filters[] = 'tbl.author LIKE :searchAuthor';
            $parameters['searchAuthor'] = '%' . $fragment . '%';
            $filters[] = 'tbl.notes LIKE :searchNotes';
            $parameters['searchNotes'] = '%' . $fragment . '%';
            $filters[] = 'tbl.messageLanguage LIKE :searchMessageLanguage';
            $parameters['searchMessageLanguage'] = '%' . $fragment . '%';
            $filters[] = 'tbl.imageUpload2 = :searchImageUpload2';
            $parameters['searchImageUpload2'] = $fragment;
            $filters[] = 'tbl.imageUpload3 = :searchImageUpload3';
            $parameters['searchImageUpload3'] = $fragment;
            $filters[] = 'tbl.imageUpload4 = :searchImageUpload4';
            $parameters['searchImageUpload4'] = $fragment;
            $filters[] = 'tbl.startDate = :searchStartDate';
            $parameters['searchStartDate'] = $fragment;
            $filters[] = 'tbl.endDate = :searchEndDate';
            $parameters['searchEndDate'] = $fragment;
            $filters[] = 'tbl.weight = :searchWeight';
            $parameters['searchWeight'] = $fragment;
        }
    
        $qb->andWhere('(' . implode(' OR ', $filters) . ')');
    
        foreach ($parameters as $parameterName => $parameterValue) {
            $qb->setParameter($parameterName, $parameterValue);
        }
    
        return $qb;
    }
    
    /**
     * Adds a filter for the createdBy field.
     *
     * @param QueryBuilder $qb     Query builder to be enhanced
     * @param integer      $userId The user identifier used for filtering
     *
     * @return QueryBuilder Enriched query builder instance
     */
    public function addCreatorFilter(QueryBuilder $qb, $userId = null)
    {
        if (null === $userId) {
            $userId = $this->currentUserApi->isLoggedIn() ? $this->currentUserApi->get('uid') : UsersConstant::USER_ID_ANONYMOUS;
        }
    
        if (is_array($userId)) {
            $qb->andWhere('tbl.createdBy IN (:userIds)')
               ->setParameter('userIds', $userId);
        } else {
            $qb->andWhere('tbl.createdBy = :userId')
               ->setParameter('userId', $userId);
        }
    
        return $qb;
    }
}
