<?php
/**
 * MUNews.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license 
 * @package MUNews
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de).
 */

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for message entities.
 *
 * @abstract
 */
abstract class MUNews_Entity_Base_Message extends Zikula_EntityAccess
{
    /**
     * @var string The tablename this object maps to.
     */
    protected $_objectType = 'message';
    
    /**
     * @var MUNews_Entity_Validator_Message The validator for this entity.
     */
    protected $_validator = null;
    
    /**
     * @var boolean Option to bypass validation if needed.
     */
    protected $_bypassValidation = false;
    
    /**
     * @var array List of available item actions.
     */
    protected $_actions = array();
    
    /**
     * @var array The current workflow data of this object.
     */
    protected $__WORKFLOW__ = array();
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id.
     */
    protected $id = 0;
    
    /**
     * @ORM\Column(length=20)
     * @var string $workflowState.
     */
    protected $workflowState = 'initial';
    
    /**
     * @Gedmo\Sluggable(slugField="slug", position=1)
     * @ORM\Column(length=255)
     * @var string $title.
     */
    protected $title = '';
    
    /**
     * @ORM\Column(type="text", length=3000)
     * @var text $startText.
     */
    protected $startText = '';
    
    /**
     * Image upload1 meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $imageUpload1Meta.
     */
    protected $imageUpload1Meta = array();
    
    /**
     * @ORM\Column(length=255)
     * @var string $imageUpload1.
     */
    protected $imageUpload1 = '';
    
    /**
     * The full path to the image upload1.
     *
     * @var string $imageUpload1FullPath.
     */
    protected $imageUpload1FullPath = '';
    
    /**
     * Full image upload1 path as url.
     *
     * @var string $imageUpload1FullPathUrl.
     */
    protected $imageUpload1FullPathUrl = '';
    /**
     * @ORM\Column(type="text", length=10000)
     * @var text $mainText.
     */
    protected $mainText = '';
    
    /**
     * Image upload2 meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $imageUpload2Meta.
     */
    protected $imageUpload2Meta = array();
    
    /**
     * @ORM\Column(length=255)
     * @var string $imageUpload2.
     */
    protected $imageUpload2 = '';
    
    /**
     * The full path to the image upload2.
     *
     * @var string $imageUpload2FullPath.
     */
    protected $imageUpload2FullPath = '';
    
    /**
     * Full image upload2 path as url.
     *
     * @var string $imageUpload2FullPathUrl.
     */
    protected $imageUpload2FullPathUrl = '';
    /**
     * Image upload3 meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $imageUpload3Meta.
     */
    protected $imageUpload3Meta = array();
    
    /**
     * @ORM\Column(length=255)
     * @var string $imageUpload3.
     */
    protected $imageUpload3 = '';
    
    /**
     * The full path to the image upload3.
     *
     * @var string $imageUpload3FullPath.
     */
    protected $imageUpload3FullPath = '';
    
    /**
     * Full image upload3 path as url.
     *
     * @var string $imageUpload3FullPathUrl.
     */
    protected $imageUpload3FullPathUrl = '';
    /**
     * Image upload4 meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $imageUpload4Meta.
     */
    protected $imageUpload4Meta = array();
    
    /**
     * @ORM\Column(length=255)
     * @var string $imageUpload4.
     */
    protected $imageUpload4 = '';
    
    /**
     * The full path to the image upload4.
     *
     * @var string $imageUpload4FullPath.
     */
    protected $imageUpload4FullPath = '';
    
    /**
     * Full image upload4 path as url.
     *
     * @var string $imageUpload4FullPathUrl.
     */
    protected $imageUpload4FullPathUrl = '';
    /**
     * @ORM\Column(type="bigint")
     * @var integer $muimageAlbum.
     */
    protected $muimageAlbum = 0;
    
    /**
     * @ORM\Column(type="smallint")
     * @var integer $weight.
     */
    protected $weight = 1;
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     * @var DateTime $startDate.
     */
    protected $startDate = null;
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $noEndDate.
     */
    protected $noEndDate = true;
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     * @var DateTime $endDate.
     */
    protected $endDate = null;
    
    /**
     * @ORM\Column(type="array")
     * @var array $options.
     */
    protected $options = array();
    
    /**
     * @ORM\Column(type="array")
     * @var array $relationTo.
     */
    protected $relationTo = array();
    
    
    /**
     * @Gedmo\Slug(style="lower", separator="-", unique=true, updatable=true)
     * @ORM\Column(type="string", length=255, unique=true)
     * @var string $slug.
     */
    protected $slug;
    
    /**
     * @ORM\OneToMany(targetEntity="MUNews_Entity_MessageCategory", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true)
     * @var MUNews_Entity_MessageCategory
     */
    protected $categories = null;
    
            /**
             * @ORM\Column(type="integer")
             * @ZK\StandardFields(type="userid", on="create")
             * @var integer $createdUserId.
             */
            protected $createdUserId;
    
            /**
             * @ORM\Column(type="integer")
             * @ZK\StandardFields(type="userid", on="update")
             * @var integer $updatedUserId.
             */
            protected $updatedUserId;
    
            /**
             * @ORM\Column(type="datetime")
             * @Gedmo\Timestampable(on="create")
             * @var datetime $createdDate.
             */
            protected $createdDate;
    
            /**
             * @ORM\Column(type="datetime")
             * @Gedmo\Timestampable(on="update")
             * @var datetime $updatedDate.
             */
            protected $updatedDate;
    
    
    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->workflowState = 'initial';
        $this->initValidator();
        $this->initWorkflow();
        $this->categories = new ArrayCollection();
    }
    
    /**
     * Get _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Set _object type.
     *
     * @param string $_objectType.
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Get _validator.
     *
     * @return MUNews_Entity_Validator_Message
     */
    public function get_validator()
    {
        return $this->_validator;
    }
    
    /**
     * Set _validator.
     *
     * @param MUNews_Entity_Validator_Message $_validator.
     *
     * @return void
     */
    public function set_validator(MUNews_Entity_Validator_Message $_validator = null)
    {
        $this->_validator = $_validator;
    }
    
    /**
     * Get _bypass validation.
     *
     * @return boolean
     */
    public function get_bypassValidation()
    {
        return $this->_bypassValidation;
    }
    
    /**
     * Set _bypass validation.
     *
     * @param boolean $_bypassValidation.
     *
     * @return void
     */
    public function set_bypassValidation($_bypassValidation)
    {
        $this->_bypassValidation = $_bypassValidation;
    }
    
    /**
     * Get _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }
    
    /**
     * Set _actions.
     *
     * @param array $_actions.
     *
     * @return void
     */
    public function set_actions(array $_actions = Array())
    {
        $this->_actions = $_actions;
    }
    
    /**
     * Get __ w o r k f l o w__.
     *
     * @return array
     */
    public function get__WORKFLOW__()
    {
        return $this->__WORKFLOW__;
    }
    
    /**
     * Set __ w o r k f l o w__.
     *
     * @param array $__WORKFLOW__.
     *
     * @return void
     */
    public function set__WORKFLOW__(array $__WORKFLOW__ = Array())
    {
        $this->__WORKFLOW__ = $__WORKFLOW__;
    }
    
    
    /**
     * Get id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Set id.
     *
     * @param integer $id.
     *
     * @return void
     */
    public function setId($id)
    {
        if ($id != $this->id) {
            $this->id = $id;
        }
    }
    
    /**
     * Get workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Set workflow state.
     *
     * @param string $workflowState.
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($workflowState != $this->workflowState) {
            $this->workflowState = $workflowState;
        }
    }
    
    /**
     * Get title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Set title.
     *
     * @param string $title.
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($title != $this->title) {
            $this->title = $title;
        }
    }
    
    /**
     * Get start text.
     *
     * @return text
     */
    public function getStartText()
    {
        return $this->startText;
    }
    
    /**
     * Set start text.
     *
     * @param text $startText.
     *
     * @return void
     */
    public function setStartText($startText)
    {
        if ($startText != $this->startText) {
            $this->startText = $startText;
        }
    }
    
    /**
     * Get image upload1.
     *
     * @return string
     */
    public function getImageUpload1()
    {
        return $this->imageUpload1;
    }
    
    /**
     * Set image upload1.
     *
     * @param string $imageUpload1.
     *
     * @return void
     */
    public function setImageUpload1($imageUpload1)
    {
        if ($imageUpload1 != $this->imageUpload1) {
            $this->imageUpload1 = $imageUpload1;
        }
    }
    
    /**
     * Get image upload1 full path.
     *
     * @return string
     */
    public function getImageUpload1FullPath()
    {
        return $this->imageUpload1FullPath;
    }
    
    /**
     * Set image upload1 full path.
     *
     * @param string $imageUpload1FullPath.
     *
     * @return void
     */
    public function setImageUpload1FullPath($imageUpload1FullPath)
    {
        if ($imageUpload1FullPath != $this->imageUpload1FullPath) {
            $this->imageUpload1FullPath = $imageUpload1FullPath;
        }
    }
    
    /**
     * Get image upload1 full path url.
     *
     * @return string
     */
    public function getImageUpload1FullPathUrl()
    {
        return $this->imageUpload1FullPathUrl;
    }
    
    /**
     * Set image upload1 full path url.
     *
     * @param string $imageUpload1FullPathUrl.
     *
     * @return void
     */
    public function setImageUpload1FullPathUrl($imageUpload1FullPathUrl)
    {
        if ($imageUpload1FullPathUrl != $this->imageUpload1FullPathUrl) {
            $this->imageUpload1FullPathUrl = $imageUpload1FullPathUrl;
        }
    }
    
    /**
     * Get image upload1 meta.
     *
     * @return array
     */
    public function getImageUpload1Meta()
    {
        return $this->imageUpload1Meta;
    }
    
    /**
     * Set image upload1 meta.
     *
     * @param array $imageUpload1Meta.
     *
     * @return void
     */
    public function setImageUpload1Meta($imageUpload1Meta = Array())
    {
        if ($imageUpload1Meta != $this->imageUpload1Meta) {
            $this->imageUpload1Meta = $imageUpload1Meta;
        }
    }
    
    /**
     * Get main text.
     *
     * @return text
     */
    public function getMainText()
    {
        return $this->mainText;
    }
    
    /**
     * Set main text.
     *
     * @param text $mainText.
     *
     * @return void
     */
    public function setMainText($mainText)
    {
        if ($mainText != $this->mainText) {
            $this->mainText = $mainText;
        }
    }
    
    /**
     * Get image upload2.
     *
     * @return string
     */
    public function getImageUpload2()
    {
        return $this->imageUpload2;
    }
    
    /**
     * Set image upload2.
     *
     * @param string $imageUpload2.
     *
     * @return void
     */
    public function setImageUpload2($imageUpload2)
    {
        if ($imageUpload2 != $this->imageUpload2) {
            $this->imageUpload2 = $imageUpload2;
        }
    }
    
    /**
     * Get image upload2 full path.
     *
     * @return string
     */
    public function getImageUpload2FullPath()
    {
        return $this->imageUpload2FullPath;
    }
    
    /**
     * Set image upload2 full path.
     *
     * @param string $imageUpload2FullPath.
     *
     * @return void
     */
    public function setImageUpload2FullPath($imageUpload2FullPath)
    {
        if ($imageUpload2FullPath != $this->imageUpload2FullPath) {
            $this->imageUpload2FullPath = $imageUpload2FullPath;
        }
    }
    
    /**
     * Get image upload2 full path url.
     *
     * @return string
     */
    public function getImageUpload2FullPathUrl()
    {
        return $this->imageUpload2FullPathUrl;
    }
    
    /**
     * Set image upload2 full path url.
     *
     * @param string $imageUpload2FullPathUrl.
     *
     * @return void
     */
    public function setImageUpload2FullPathUrl($imageUpload2FullPathUrl)
    {
        if ($imageUpload2FullPathUrl != $this->imageUpload2FullPathUrl) {
            $this->imageUpload2FullPathUrl = $imageUpload2FullPathUrl;
        }
    }
    
    /**
     * Get image upload2 meta.
     *
     * @return array
     */
    public function getImageUpload2Meta()
    {
        return $this->imageUpload2Meta;
    }
    
    /**
     * Set image upload2 meta.
     *
     * @param array $imageUpload2Meta.
     *
     * @return void
     */
    public function setImageUpload2Meta($imageUpload2Meta = Array())
    {
        if ($imageUpload2Meta != $this->imageUpload2Meta) {
            $this->imageUpload2Meta = $imageUpload2Meta;
        }
    }
    
    /**
     * Get image upload3.
     *
     * @return string
     */
    public function getImageUpload3()
    {
        return $this->imageUpload3;
    }
    
    /**
     * Set image upload3.
     *
     * @param string $imageUpload3.
     *
     * @return void
     */
    public function setImageUpload3($imageUpload3)
    {
        if ($imageUpload3 != $this->imageUpload3) {
            $this->imageUpload3 = $imageUpload3;
        }
    }
    
    /**
     * Get image upload3 full path.
     *
     * @return string
     */
    public function getImageUpload3FullPath()
    {
        return $this->imageUpload3FullPath;
    }
    
    /**
     * Set image upload3 full path.
     *
     * @param string $imageUpload3FullPath.
     *
     * @return void
     */
    public function setImageUpload3FullPath($imageUpload3FullPath)
    {
        if ($imageUpload3FullPath != $this->imageUpload3FullPath) {
            $this->imageUpload3FullPath = $imageUpload3FullPath;
        }
    }
    
    /**
     * Get image upload3 full path url.
     *
     * @return string
     */
    public function getImageUpload3FullPathUrl()
    {
        return $this->imageUpload3FullPathUrl;
    }
    
    /**
     * Set image upload3 full path url.
     *
     * @param string $imageUpload3FullPathUrl.
     *
     * @return void
     */
    public function setImageUpload3FullPathUrl($imageUpload3FullPathUrl)
    {
        if ($imageUpload3FullPathUrl != $this->imageUpload3FullPathUrl) {
            $this->imageUpload3FullPathUrl = $imageUpload3FullPathUrl;
        }
    }
    
    /**
     * Get image upload3 meta.
     *
     * @return array
     */
    public function getImageUpload3Meta()
    {
        return $this->imageUpload3Meta;
    }
    
    /**
     * Set image upload3 meta.
     *
     * @param array $imageUpload3Meta.
     *
     * @return void
     */
    public function setImageUpload3Meta($imageUpload3Meta = Array())
    {
        if ($imageUpload3Meta != $this->imageUpload3Meta) {
            $this->imageUpload3Meta = $imageUpload3Meta;
        }
    }
    
    /**
     * Get image upload4.
     *
     * @return string
     */
    public function getImageUpload4()
    {
        return $this->imageUpload4;
    }
    
    /**
     * Set image upload4.
     *
     * @param string $imageUpload4.
     *
     * @return void
     */
    public function setImageUpload4($imageUpload4)
    {
        if ($imageUpload4 != $this->imageUpload4) {
            $this->imageUpload4 = $imageUpload4;
        }
    }
    
    /**
     * Get image upload4 full path.
     *
     * @return string
     */
    public function getImageUpload4FullPath()
    {
        return $this->imageUpload4FullPath;
    }
    
    /**
     * Set image upload4 full path.
     *
     * @param string $imageUpload4FullPath.
     *
     * @return void
     */
    public function setImageUpload4FullPath($imageUpload4FullPath)
    {
        if ($imageUpload4FullPath != $this->imageUpload4FullPath) {
            $this->imageUpload4FullPath = $imageUpload4FullPath;
        }
    }
    
    /**
     * Get image upload4 full path url.
     *
     * @return string
     */
    public function getImageUpload4FullPathUrl()
    {
        return $this->imageUpload4FullPathUrl;
    }
    
    /**
     * Set image upload4 full path url.
     *
     * @param string $imageUpload4FullPathUrl.
     *
     * @return void
     */
    public function setImageUpload4FullPathUrl($imageUpload4FullPathUrl)
    {
        if ($imageUpload4FullPathUrl != $this->imageUpload4FullPathUrl) {
            $this->imageUpload4FullPathUrl = $imageUpload4FullPathUrl;
        }
    }
    
    /**
     * Get image upload4 meta.
     *
     * @return array
     */
    public function getImageUpload4Meta()
    {
        return $this->imageUpload4Meta;
    }
    
    /**
     * Set image upload4 meta.
     *
     * @param array $imageUpload4Meta.
     *
     * @return void
     */
    public function setImageUpload4Meta($imageUpload4Meta = Array())
    {
        if ($imageUpload4Meta != $this->imageUpload4Meta) {
            $this->imageUpload4Meta = $imageUpload4Meta;
        }
    }
    
    /**
     * Get muimage album.
     *
     * @return bigint
     */
    public function getMuimageAlbum()
    {
        return $this->muimageAlbum;
    }
    
    /**
     * Set muimage album.
     *
     * @param bigint $muimageAlbum.
     *
     * @return void
     */
    public function setMuimageAlbum($muimageAlbum)
    {
        if ($muimageAlbum != $this->muimageAlbum) {
            $this->muimageAlbum = $muimageAlbum;
        }
    }
    
    /**
     * Get weight.
     *
     * @return smallint
     */
    public function getWeight()
    {
        return $this->weight;
    }
    
    /**
     * Set weight.
     *
     * @param smallint $weight.
     *
     * @return void
     */
    public function setWeight($weight)
    {
        if ($weight != $this->weight) {
            $this->weight = $weight;
        }
    }
    
    /**
     * Get start date.
     *
     * @return DateTime
     */
    public function getStartDate()
    {
        return $this->startDate;
    }
    
    /**
     * Set start date.
     *
     * @param DateTime $startDate.
     *
     * @return void
     */
    public function setStartDate($startDate)
    {
        if ($startDate != $this->startDate) {
            if (is_object($startDate) && $startDate instanceOf \DateTime) {
                $this->startDate = $startDate;
            } else {
                $this->startDate = new \DateTime($startDate);
            }
        }
    }
    
    /**
     * Get no end date.
     *
     * @return boolean
     */
    public function getNoEndDate()
    {
        return $this->noEndDate;
    }
    
    /**
     * Set no end date.
     *
     * @param boolean $noEndDate.
     *
     * @return void
     */
    public function setNoEndDate($noEndDate)
    {
        if ($noEndDate !== $this->noEndDate) {
            $this->noEndDate = (bool)$noEndDate;
        }
    }
    
    /**
     * Get end date.
     *
     * @return DateTime
     */
    public function getEndDate()
    {
        return $this->endDate;
    }
    
    /**
     * Set end date.
     *
     * @param DateTime $endDate.
     *
     * @return void
     */
    public function setEndDate($endDate)
    {
        if ($endDate != $this->endDate) {
            if (is_object($endDate) && $endDate instanceOf \DateTime) {
                $this->endDate = $endDate;
            } else {
                $this->endDate = new \DateTime($endDate);
            }
        }
    }
    
    /**
     * Get options.
     *
     * @return array
     */
    public function getOptions()
    {
        return $this->options;
    }
    
    /**
     * Set options.
     *
     * @param array $options.
     *
     * @return void
     */
    public function setOptions($options)
    {
        if ($options != $this->options) {
            $this->options = $options;
        }
    }
    
    /**
     * Get relation to.
     *
     * @return array
     */
    public function getRelationTo()
    {
        return $this->relationTo;
    }
    
    /**
     * Set relation to.
     *
     * @param array $relationTo.
     *
     * @return void
     */
    public function setRelationTo($relationTo)
    {
        if ($relationTo != $this->relationTo) {
            $this->relationTo = $relationTo;
        }
    }
    
    /**
     * Get slug.
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->slug;
    }
    
    /**
     * Get categories.
     *
     * @return array
     */
    public function getCategories()
    {
        return $this->categories;
    }
    
    /**
     * Set categories.
     *
     * @param array $categories.
     *
     * @return void
     */
    public function setCategories($categories)
    {
        $this->categories = $categories;
    }
    
    /**
     * Get created user id.
     *
     * @return integer
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }
    
    /**
     * Set created user id.
     *
     * @param integer $createdUserId.
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }
    
    /**
     * Get updated user id.
     *
     * @return integer
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }
    
    /**
     * Set updated user id.
     *
     * @param integer $updatedUserId.
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }
    
    /**
     * Get created date.
     *
     * @return datetime
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }
    
    /**
     * Set created date.
     *
     * @param datetime $createdDate.
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }
    
    /**
     * Get updated date.
     *
     * @return datetime
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }
    
    /**
     * Set updated date.
     *
     * @param datetime $updatedDate.
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }
    
    
    
    /**
     * Initialises the validator and return it's instance.
     *
     * @return MUNews_Entity_Validator_Message The validator for this entity.
     */
    public function initValidator()
    {
        if (!is_null($this->_validator)) {
            return $this->_validator;
        }
        $this->_validator = new MUNews_Entity_Validator_Message($this);
    
        return $this->_validator;
    }
    
    /**
     * Sets/retrieves the workflow details.
     *
     * @param boolean $forceLoading load the workflow record.
     */
    public function initWorkflow($forceLoading = false)
    {
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $isReuse = FormUtil::getPassedValue('astemplate', '', 'GETPOST', FILTER_SANITIZE_STRING);
    
        // apply workflow with most important information
        $idColumn = 'id';
        $workflowHelper = new MUNews_Util_Workflow(ServiceUtil::getManager());
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = array(
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => $idColumn,
            'obj_id' => $this[$idColumn],
            'schemaname' => $schemaName);
        
        // load the real workflow only when required (e. g. when func is edit or delete)
        if ((!in_array($currentFunc, array('main', 'view', 'display')) && empty($isReuse)) || $forceLoading) {
            $result = Zikula_Workflow_Util::getWorkflowForObject($this, $this['_objectType'], $idColumn, 'MUNews');
            if (!$result) {
                $dom = ZLanguage::getModuleDomain('MUNews');
                LogUtil::registerError(__('Error! Could not load the associated workflow.', $dom));
            }
        }
        
        if (!is_object($this['__WORKFLOW__']) && !isset($this['__WORKFLOW__']['schemaname'])) {
            $workflow = $this['__WORKFLOW__'];
            $workflow['schemaname'] = $schemaName;
            $this['__WORKFLOW__'] = $workflow;
        }
    }
    
    /**
     * Resets workflow data back to initial state.
     * To be used after cloning an entity object.
     */
    public function resetWorkflow()
    {
        $this->setWorkflowState('initial');
        $workflowHelper = new MUNews_Util_Workflow(ServiceUtil::getManager());
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = array(
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => 'id',
            'obj_id' => 0,
            'schemaname' => $schemaName);
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     *
     * @throws Zikula_Exception Thrown if a validation error occurs
     */
    public function validate()
    {
        if ($this->_bypassValidation === true) {
            return;
        }
    
        $result = $this->initValidator()->validateAll();
        if (is_array($result)) {
            throw new Zikula_Exception($result['message'], $result['code'], $result['debugArray']);
        }
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }
    
        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $dom = ZLanguage::getModuleDomain('MUNews');
        if ($currentType == 'admin') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'message', 'id' => $this['id'], 'slug' => $this->slug)),
                    'icon' => 'preview',
                    'linkTitle' => __('Open preview page', $dom),
                    'linkText' => __('Preview', $dom)
                );
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'display', 'arguments' => array('ot' => 'message', 'id' => $this['id'], 'slug' => $this->slug)),
                    'icon' => 'display',
                    'linkTitle' => str_replace('"', '', $this->getTitleFromDisplayPattern()),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                $component = 'MUNews:Message:';
                $instance = $this->id . '::';
                if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
                    // only allow editing for the owner or people with higher permissions
                    if ($this['createdUserId'] == UserUtil::getVar('uid') || SecurityUtil::checkPermission($component, $instance, ACCESS_ADD)) {
                        $this->_actions[] = array(
                            'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'message', 'id' => $this['id'])),
                            'icon' => 'edit',
                            'linkTitle' => __('Edit', $dom),
                            'linkText' => __('Edit', $dom)
                        );
                        $this->_actions[] = array(
                            'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'message', 'astemplate' => $this['id'])),
                            'icon' => 'saveas',
                            'linkTitle' => __('Reuse for new item', $dom),
                            'linkText' => __('Reuse', $dom)
                        );
                    }
                }
                if (SecurityUtil::checkPermission($component, $instance, ACCESS_DELETE)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'delete', 'arguments' => array('ot' => 'message', 'id' => $this['id'])),
                        'icon' => 'delete',
                        'linkTitle' => __('Delete', $dom),
                        'linkText' => __('Delete', $dom)
                    );
                }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'view', 'arguments' => array('ot' => 'message')),
                    'icon' => 'back',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
        if ($currentType == 'user') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'message', 'id' => $this['id'], 'slug' => $this->slug)),
                    'icon' => 'display',
                    'linkTitle' => str_replace('"', '', $this->getTitleFromDisplayPattern()),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                $component = 'MUNews:Message:';
                $instance = $this->id . '::';
                if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
                    // only allow editing for the owner or people with higher permissions
                    if ($this['createdUserId'] == UserUtil::getVar('uid') || SecurityUtil::checkPermission($component, $instance, ACCESS_ADD)) {
                        $this->_actions[] = array(
                            'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'message', 'id' => $this['id'])),
                            'icon' => 'edit',
                            'linkTitle' => __('Edit', $dom),
                            'linkText' => __('Edit', $dom)
                        );
                        $this->_actions[] = array(
                            'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'message', 'astemplate' => $this['id'])),
                            'icon' => 'saveas',
                            'linkTitle' => __('Reuse for new item', $dom),
                            'linkText' => __('Reuse', $dom)
                        );
                    }
                }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'view', 'arguments' => array('ot' => 'message')),
                    'icon' => 'back',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return Array The resulting arguments list.
     */
    public function createUrlArgs()
    {
        $args = array('ot' => $this['_objectType']);
    
        $args['id'] = $this['id'];
    
        if (isset($this['slug'])) {
            $args['slug'] = $this['slug'];
        }
    
        return $args;
    }
    
    /**
     * Create concatenated identifier string (for composite keys).
     *
     * @return String concatenated identifiers.
     */
    public function createCompositeIdentifier()
    {
        $itemId = $this['id'];
    
        return $itemId;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'munews.ui_hooks.messages';
    }

    /**
     * Returns an array of all related objects that need to be persited after clone.
     * 
     * @param array $objects The objects are added to this array. Default: array()
     * 
     * @return array of entity objects.
     */
    public function getRelatedObjectsToPersist(&$objects = array()) {
        return array();
     }

    
    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see MUNews_Entity_Message::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $usesCsvOutput = FormUtil::getPassedValue('usecsvext', false, 'GETPOST', FILTER_SANITIZE_STRING);
        
        // initialise the upload handler
        $uploadManager = new MUNews_UploadHandler();
        $serviceManager = ServiceUtil::getManager();
        $controllerHelper = new MUNews_Util_Controller($serviceManager);
        
        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
        $this->formatTextualField('workflowState', $currentFunc, $usesCsvOutput, true);
        $this->formatTextualField('title', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('startText', $currentFunc, $usesCsvOutput);
        if (!empty($this['imageUpload1'])) {
            try {
                $basePath = $controllerHelper->getFileBaseFolder('message', 'imageUpload1');
            } catch (\Exception $e) {
                return LogUtil::registerError($e->getMessage());
            }
        
            $fullPath = $basePath .  $this['imageUpload1'];
            $this['imageUpload1FullPath'] = $fullPath;
            $this['imageUpload1FullPathURL'] = System::getBaseUrl() . $fullPath;
        
            // just some backwards compatibility stuff
            /*if (!isset($this['imageUpload1Meta']) || !is_array($this['imageUpload1Meta']) || !count($this['imageUpload1Meta'])) {
                // assign new meta data
                $this['imageUpload1Meta'] = $uploadManager->readMetaDataForFile($this['imageUpload1'], $fullPath);
            }*/
        }
        $this->formatTextualField('mainText', $currentFunc, $usesCsvOutput);
        if (!empty($this['imageUpload2'])) {
            try {
                $basePath = $controllerHelper->getFileBaseFolder('message', 'imageUpload2');
            } catch (\Exception $e) {
                return LogUtil::registerError($e->getMessage());
            }
        
            $fullPath = $basePath .  $this['imageUpload2'];
            $this['imageUpload2FullPath'] = $fullPath;
            $this['imageUpload2FullPathURL'] = System::getBaseUrl() . $fullPath;
        
            // just some backwards compatibility stuff
            /*if (!isset($this['imageUpload2Meta']) || !is_array($this['imageUpload2Meta']) || !count($this['imageUpload2Meta'])) {
                // assign new meta data
                $this['imageUpload2Meta'] = $uploadManager->readMetaDataForFile($this['imageUpload2'], $fullPath);
            }*/
        }
        if (!empty($this['imageUpload3'])) {
            try {
                $basePath = $controllerHelper->getFileBaseFolder('message', 'imageUpload3');
            } catch (\Exception $e) {
                return LogUtil::registerError($e->getMessage());
            }
        
            $fullPath = $basePath .  $this['imageUpload3'];
            $this['imageUpload3FullPath'] = $fullPath;
            $this['imageUpload3FullPathURL'] = System::getBaseUrl() . $fullPath;
        
            // just some backwards compatibility stuff
            /*if (!isset($this['imageUpload3Meta']) || !is_array($this['imageUpload3Meta']) || !count($this['imageUpload3Meta'])) {
                // assign new meta data
                $this['imageUpload3Meta'] = $uploadManager->readMetaDataForFile($this['imageUpload3'], $fullPath);
            }*/
        }
        if (!empty($this['imageUpload4'])) {
            try {
                $basePath = $controllerHelper->getFileBaseFolder('message', 'imageUpload4');
            } catch (\Exception $e) {
                return LogUtil::registerError($e->getMessage());
            }
        
            $fullPath = $basePath .  $this['imageUpload4'];
            $this['imageUpload4FullPath'] = $fullPath;
            $this['imageUpload4FullPathURL'] = System::getBaseUrl() . $fullPath;
        
            // just some backwards compatibility stuff
            /*if (!isset($this['imageUpload4Meta']) || !is_array($this['imageUpload4Meta']) || !count($this['imageUpload4Meta'])) {
                // assign new meta data
                $this['imageUpload4Meta'] = $uploadManager->readMetaDataForFile($this['imageUpload4'], $fullPath);
            }*/
        }
        $this['muimageAlbum'] = (int) ((isset($this['muimageAlbum']) && !empty($this['muimageAlbum'])) ? DataUtil::formatForDisplay($this['muimageAlbum']) : 0);
        $this['weight'] = (int) ((isset($this['weight']) && !empty($this['weight'])) ? DataUtil::formatForDisplay($this['weight']) : 0);
        $this['noEndDate'] = (bool) $this['noEndDate'];
        $this['options'] = ((isset($this['options']) && is_array($this['options'])) ? DataUtil::formatForDisplay($this['options']) : array());
        $this['relationTo'] = ((isset($this['relationTo']) && is_array($this['relationTo'])) ? DataUtil::formatForDisplay($this['relationTo']) : array());
    
        $this->prepareItemActions();
    
        return true;
    }
    
    /**
     * Formats a given textual field depending on it's actual kind of content.
     *
     * @param string  $fieldName     Name of field to be formatted.
     * @param string  $currentFunc   Name of current controller action.
     * @param string  $usesCsvOutput Whether the output is CSV or not (defaults to false).
     * @param boolean $allowZero     Whether 0 values are allowed or not (defaults to false).
     */
    protected function formatTextualField($fieldName, $currentFunc, $usesCsvOutput = false, $allowZero = false)
    {
        if ($currentFunc == 'edit') {
            // apply no changes when editing the content
            return;
        }
    
        $string = '';
        if (isset($this[$fieldName])) {
            if (!empty($this[$fieldName]) || ($allowZero && $this[$fieldName] == 0)) {
                $string = $this[$fieldName];
                if ($usesCsvOutput == 1) {
                    // strip only quotes when displaying raw output in CSV
                    $string = str_replace('"', '""', $string);
                } else {
                    if ($this->containsHtml($string)) {
                        $string = DataUtil::formatForDisplayHTML($string);
                    } else {
                        $string = DataUtil::formatForDisplay($string);
                        $string = nl2br($string);
                    }
                }
            }
        }
    
        $this[$fieldName] = $string;
    }
    
    /**
     * Checks whether any html tags are contained in the given string.
     * See http://stackoverflow.com/questions/10778035/how-to-check-if-string-contents-have-any-html-in-it for implementation details.
     *
     * @param $string string The given input string.
     *
     * @return boolean Whether any html tags are found or not.
     */
    protected function containsHtml($string)
    {
        return preg_match("/<[^<]+>/", $string, $m) != 0;
    }
    
    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see MUNews_Entity_Message::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        // echo 'inserting a record ...';
        $this->validate();
    
        return true;
    }
    
    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see MUNews_Entity_Message::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        // echo 'inserted a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MUNews_Entity_Message::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
        // delete workflow for this entity
        $workflow = $this['__WORKFLOW__'];
        if ($workflow['id'] > 0) {
            $result = (bool) DBUtil::deleteObjectByID('workflows', $workflow['id']);
            if ($result === false) {
                $dom = ZLanguage::getModuleDomain('MUNews');
                return LogUtil::registerError(__('Error! Could not remove stored workflow. Deletion has been aborted.', $dom));
            }
        }
    
        return true;
    }
    
    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MUNews_Entity_Message::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        // echo 'deleted a record ...';
        $objectId = $this['id'];
        // initialise the upload handler
        $uploadManager = new MUNews_UploadHandler();
    
        $uploadFields = array('imageUpload1', 'imageUpload2', 'imageUpload3', 'imageUpload4');
        foreach ($uploadFields as $uploadField) {
            if (empty($this->$uploadField)) {
                continue;
            }
    
            // remove upload file (and image thumbnails)
            $uploadManager->deleteUploadFile('message', $this, $uploadField, $objectId);
        }
    
        return true;
    }
    
    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see MUNews_Entity_Message::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        // echo 'updating a record ...';
        $this->validate();
    
        return true;
    }
    
    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see MUNews_Entity_Message::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        // echo 'updated a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MUNews_Entity_Message::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        // echo 'saving a record ...';
        $this->validate();
    
        return true;
    }
    
    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MUNews_Entity_Message::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        // echo 'saved a record ...';
        return true;
    }
    

    /**
     * Returns the formatted title conforming to the display pattern
     * specified for this entity.
     */
    public function getTitleFromDisplayPattern()
    {
        $formattedTitle = $this->getTitle();
    
        return $formattedTitle;
    }

    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     */
    public function __toString()
    {
        return $this->getId();
    }

    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     * (4) http://www.pantovic.com/article/26/doctrine2-entity-cloning
     */
    public function __clone()
    {
        // If the entity has an identity, proceed as normal.
        if ($this->id) {
            // unset identifiers
            $this->setId(0);
    
            // init validator
            $this->initValidator();
    
            // reset Workflow
            $this->resetWorkflow();
    
            $this->setCreatedDate(null);
            $this->setCreatedUserId(null);
            $this->setUpdatedDate(null);
            $this->setUpdatedUserId(null);
    
        }
        // otherwise do nothing, do NOT throw an exception!
    }
}
