<?php
use Doctrine\ORM\Id\AssignedGenerator;

/**
 * MUNews.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license 
 * @package MUNews
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de).
 */

/**
 * This is the User controller class providing navigation and interaction functionality.
 */
class MUNews_Controller_User extends MUNews_Controller_Base_User
{
    /**
     * Post initialise.
     *
     * Run after construction.
     *
     * @return void
     */
    protected function postInitialize()
    {
        // Set caching to true by default.
        $this->view->setCaching(Zikula_View::CACHE_DISABLED);
    }
    
    /**
     * This method provides a generic item list overview.
     *
     * @param string  $ot           Treated object type.
     * @param string  $sort         Sorting field.
     * @param string  $sortdir      Sorting direction.
     * @param int     $pos          Current pager position.
     * @param int     $num          Amount of entries to display.
     * @param string  $tpl          Name of alternative template (for alternative display options, feeds and xml output)
     * @param boolean $raw          Optional way to display a template instead of fetching it (needed for standalone output)
     *
     * @return mixed Output.
     */
    public function view()
    {
        $controllerHelper = new MUNews_Util_Controller($this->serviceManager);
    
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'message', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'view');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucwords($objectType) . ':', '::', ACCESS_READ), LogUtil::getErrorMsgPermission());
        $entityClass = $this->name . '_Entity_' . ucwords($objectType);
        $repository = $this->entityManager->getRepository($entityClass);
        $repository->setControllerArguments(array());
        $viewHelper = new MUNews_Util_View($this->serviceManager);
    
        // parameter for used sorting field
        $sort = $this->request->query->filter('sort', '', FILTER_SANITIZE_STRING);
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
        }
    
        // parameter for used sort order
        $sdir = $this->request->query->filter('sortdir', '', FILTER_SANITIZE_STRING);
        $sdir = strtolower($sdir);
        if ($sdir != 'asc' && $sdir != 'desc') {
            $sdir = 'asc';
        }
        
        // we set the sort order to desc by default
        $sdir = 'desc';
    
        // convenience vars to make code clearer
        $currentUrlArgs = array('ot' => $objectType);
    
        $where = '';
    
        $selectionArgs = array(
                'ot' => $objectType,
                'where' => $where,
                'orderBy' => $sort . ' ' . $sdir
        );
    
        $showOwnEntries = (int) $this->request->query->filter('own', $this->getVar('showOnlyOwnEntries', 0), FILTER_VALIDATE_INT);
        $showAllEntries = (int) $this->request->query->filter('all', 0, FILTER_VALIDATE_INT);
    
        if (!$showAllEntries) {
            $csv = (int) $this->request->query->filter('usecsvext', 0, FILTER_VALIDATE_INT);
            if ($csv == 1) {
                $showAllEntries = 1;
            }
        }
    
        $this->view->assign('showOwnEntries', $showOwnEntries)
        ->assign('showAllEntries', $showAllEntries);
        if ($showOwnEntries == 1) {
            $currentUrlArgs['own'] = 1;
        }
        if ($showAllEntries == 1) {
            $currentUrlArgs['all'] = 1;
        }
    
        // prepare access level for cache id
        $accessLevel = ACCESS_READ;
        $component = 'MUNews:' . ucwords($objectType) . ':';
        $instance = '::';
        if (SecurityUtil::checkPermission($component, $instance, ACCESS_COMMENT)) {
            $accessLevel = ACCESS_COMMENT;
        }
        if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
            $accessLevel = ACCESS_EDIT;
        }
    
        $templateFile = $viewHelper->getViewTemplate($this->view, 'user', $objectType, 'view', array());
        $cacheId = 'view|ot_' . $objectType . '_sort_' . $sort . '_' . $sdir;
        $resultsPerPage = 0;
        if ($showAllEntries == 1) {
            // set cache id
            $this->view->setCacheId($cacheId . '_all_1_own_' . $showOwnEntries . '_' . $accessLevel);
    
            // if page is cached return cached content
            if ($this->view->is_cached($templateFile)) {
                return $viewHelper->processTemplate($this->view, 'user', $objectType, 'view', array(), $templateFile);
            }
    
            // retrieve item list without pagination
            $entities = ModUtil::apiFunc($this->name, 'selection', 'getEntities', $selectionArgs);
        } else {
            // the current offset which is used to calculate the pagination
            $currentPage = (int) $this->request->query->filter('pos', 1, FILTER_VALIDATE_INT);
    
            // the number of items displayed on a page for pagination
            $resultsPerPage = (int) $this->request->query->filter('num', 0, FILTER_VALIDATE_INT);
            if ($resultsPerPage == 0) {
                $resultsPerPage = $this->getVar('newsPerPage', 10);
            }
    
            // set cache id
            $this->view->setCacheId($cacheId . '_amount_' . $resultsPerPage . '_page_' . $currentPage . '_own_' . $showOwnEntries . '_' . $accessLevel);
    
            // if page is cached return cached content
            if ($this->view->is_cached($templateFile)) {
                return $viewHelper->processTemplate($this->view, 'user', $objectType, 'view', array(), $templateFile);
            }
    
            // retrieve item list with pagination
            $selectionArgs['currentPage'] = $currentPage;
            $selectionArgs['resultsPerPage'] = $resultsPerPage;
            list($entities, $objectCount) = ModUtil::apiFunc($this->name, 'selection', 'getEntitiesPaginated', $selectionArgs);
    
            $this->view->assign('currentPage', $currentPage)
            ->assign('pager', array('numitems'     => $objectCount,
                    'itemsperpage' => $resultsPerPage));
        }
    
        foreach ($entities as $k => $entity) {
            $entity->initWorkflow();
        }
    
        // build ModUrl instance for display hooks
        $currentUrlObject = new Zikula_ModUrl($this->name, 'user', 'view', ZLanguage::getLanguageCode(), $currentUrlArgs);
    
        // assign the object data, sorting information and details for creating the pager
        $this->view->assign('items', $entities)
        ->assign('sort', $sort)
        ->assign('sdir', $sdir)
        ->assign('pageSize', $resultsPerPage)
        ->assign('currentUrlObject', $currentUrlObject)
        ->assign($repository->getAdditionalTemplateParameters('controllerAction', $utilArgs));
        
        // we asssign module vars
        $showAuthor = ModUtil::getVar($this->name, 'showAuthor');
        $showDate = ModUtil::getVar($this->name, 'showDate');
        
        $this->view->assign('showAuthor', $showAuthor)
        ->assign('showDate', $showDate);
    
        $modelHelper = new MUNews_Util_Model($this->serviceManager);
        $this->view->assign('canBeCreated', $modelHelper->canBeCreated($objectType));
    
        // fetch and return the appropriate template
        return $viewHelper->processTemplate($this->view, 'user', $objectType, 'view', array(), $templateFile);
    }     
     
     /**
     * This method provides a generic item detail view.
     *
     * @param string  $ot           Treated object type.
     * @param string  $tpl          Name of alternative template (for alternative display options, feeds and xml output)
     * @param boolean $raw          Optional way to display a template instead of fetching it (needed for standalone output)
     *
     * @return mixed Output.
     */
    public function display()
    {        
        $showAuthor = ModUtil::getVar($this->name, 'showAuthor');
        $showDate = ModUtil::getVar($this->name, 'showDate');
        
        $this->view->assign('showAuthor', $showAuthor)
                   ->assign('showDate', $showDate);
        
        // we check for module MUImage and legacy mode on
        $muimage = ModUtil::available('MUImage');
        $legacy = System::isLegacyMode();
        
        if ($muimage == true && $legacy == true) {
            $useMUImage = true;
        } else {
            $useMUImage = false;
        }
        
        $this->view->assign('useMUImage', $useMUImage);
        
        return parent::display();
    }
}
